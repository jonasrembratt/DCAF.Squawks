<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TetraPak.Common</name>
    </assembly>
    <members>
        <member name="T:TetraPak.Caching.ITimeLimitedRepositories">
            <summary>
              Implementors of this contract can act as a repository for arbitrary values
              with a for a limited time, which can be useful for caching purposes.
            </summary>
        </member>
        <member name="P:TetraPak.Caching.ITimeLimitedRepositories.DefaultLifeSpan">
            <summary>
              Gets or sets a default lifespan for repository values. 
            </summary>
        </member>
        <member name="P:TetraPak.Caching.ITimeLimitedRepositories.DefaultExtendedLifeSpan">
            <summary>
              Gets a default extended lifespan for repository values. The extended lifespan
              is applied to entities as they are read or updated.
            </summary>
            <remarks>
              Set this value to zero ("0" or "0:0:0") to avoid extending entries' cache lifespan.
            </remarks>
        </member>
        <member name="P:TetraPak.Caching.ITimeLimitedRepositories.DefaultMaxLifeSpan">
            <summary>
              Gets a default maximum lifespan for repository values.
              The maximum lifespan can never be exceeded by dynamically extending cached entries' lifespan.  
            </summary>
            <seealso cref="P:TetraPak.Caching.ITimeLimitedRepositories.DefaultLifeSpan"/>
            <seealso cref="P:TetraPak.Caching.ITimeLimitedRepositories.DefaultExtendedLifeSpan"/>
            <seealso cref="P:TetraPak.Caching.ITimeLimitedRepositories.DefaultAdjustedLifeSpan"/>
        </member>
        <member name="P:TetraPak.Caching.ITimeLimitedRepositories.DefaultAdjustedLifeSpan">
            <summary>
              Gets a default adjusted lifespan for repository values.
            </summary>
            <seealso cref="P:TetraPak.Caching.ITimeLimitedRepositories.DefaultLifeSpan"/>
            <seealso cref="P:TetraPak.Caching.ITimeLimitedRepositories.DefaultExtendedLifeSpan"/>
            <seealso cref="P:TetraPak.Caching.ITimeLimitedRepositories.DefaultMaxLifeSpan"/>
        </member>
        <member name="P:TetraPak.Caching.ITimeLimitedRepositories.IsTypeStrict">
            <summary>
              Gets or sets a value specifying whether value types should be validated when updated.
              Attempts to update an existing value with a value that is type incompatible will
              throw an <see cref="T:TetraPak.IdentityConflictException"/>. 
            </summary>
        </member>
        <member name="M:TetraPak.Caching.ITimeLimitedRepositories.GetLifeSpan(System.String)">
            <summary>
              Gets the lifespan configured for a specified repository. 
            </summary>
            <param name="repository">
              Identifies the repository.    
            </param>
            <returns>
              A <see cref="T:System.TimeSpan"/> value.
            </returns>
        </member>
        <member name="M:TetraPak.Caching.ITimeLimitedRepositories.GetMaxLifeSpan(System.String)">
            <summary>
              Gets the maximum allowed lifespan configured for a specified repository. 
            </summary>
            <param name="repository">
              Identifies the repository.    
            </param>
            <returns>
              A <see cref="T:System.TimeSpan"/> value.
            </returns>
        </member>
        <member name="M:TetraPak.Caching.ITimeLimitedRepositories.GetExtendedLifeSpan(System.String)">
            <summary>
              Gets the extended lifespan configured for a specified repository.
              The extended lifespan is applied every time a cached entity is read or updated.  
            </summary>
            <param name="repository">
              Identifies the repository.    
            </param>
            <returns>
              A <see cref="T:System.TimeSpan"/> value.
            </returns>
        </member>
        <member name="M:TetraPak.Caching.ITimeLimitedRepositories.GetAdjustedLifeSpan(System.String)">
            <summary>
              Gets the reduced lifespan configured for a specified repository.
              The reduced lifespan is applied every time a cached entity is read or updated.  
            </summary>
            <param name="repository">
              Identifies the repository.    
            </param>
            <returns>
              A <see cref="T:System.TimeSpan"/> value.
            </returns>
        </member>
        <member name="M:TetraPak.Caching.ITimeLimitedRepositories.GetAsync``1(System.String,System.String)">
            <summary>
              Looks up a value in a repository.
            </summary>
            <param name="repository">
              Identifies the repository where the value should exist.
            </param>
            <param name="key">
                Identifies the requested value.
            </param>
            <typeparam name="T">
              The requested value <see cref="T:System.Type"/>.
            </typeparam>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> to indicate success/failure and also carry the requested value
              (or an <see cref="T:System.Exception"/> on failure).
            </returns>
        </member>
        <member name="M:TetraPak.Caching.ITimeLimitedRepositories.AddAsync(System.String,System.String,System.Object,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
            <summary>
              Adds a new time limited value.
            </summary>
            <param name="repository">
                Identifies the repository where the new value should exist.
            </param>
            <param name="key">
                Value's unique identifier.
            </param>
            <param name="value">
                The value to be added.
            </param>
            <param name="customLifeSpan">
                (optional; default=<see cref="P:TetraPak.Caching.ITimeLimitedRepositories.DefaultLifeSpan"/>)<br/>
                A custom lifespan for the value.
            </param>
            <param name="spawnTimeUtc">
                (optional; default=<see cref="P:System.DateTime.UtcNow"/>)<br/>
                Specifies the spawn time for the value.
            </param>
            <exception cref="T:TetraPak.IdentityConflictException">
              A value with the same <paramref name="key"/> was already added.
            </exception>
        </member>
        <member name="M:TetraPak.Caching.ITimeLimitedRepositories.UpdateAsync(System.String,System.String,System.Object,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
            <summary>
              Updates an existing time limited value.
            </summary>
            <param name="repository">
                Identifies the repository where the value should exist.
            </param>
            <param name="key">
                Value's unique identifier.
            </param>
            <param name="value">
                The value to be added.
            </param>
            <param name="customLifeSpan">
                (optional; default=<see cref="P:TetraPak.Caching.ITimeLimitedRepositories.DefaultLifeSpan"/>)<br/>
                A custom lifespan for the value.
            </param>
            <param name="spawnTimeUtc">
                (optional; default=<see cref="P:System.DateTime.UtcNow"/>)<br/>
                Specifies the spawn time for the value.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              A value could not be identified from the specified <paramref name="key"/>.
            </exception>
        </member>
        <member name="M:TetraPak.Caching.ITimeLimitedRepositories.AddOrUpdateAsync(System.String,System.String,System.Object,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
            <summary>
              Adds a new value or updated an existing one.
            </summary>
            <param name="repository">
                Identifies the repository where the value should exist.
            </param>
            <param name="key">
                Value's unique identifier.
            </param>
            <param name="value">
                The value to be added or updated.
            </param>
            <param name="customLifeSpan">
                (optional; default=<see cref="P:TetraPak.Caching.ITimeLimitedRepositories.DefaultLifeSpan"/>)<br/>
                A custom lifespan for the value.
            </param>
            <param name="spawnTimeUtc">
                (optional; default=<see cref="P:System.DateTime.UtcNow"/>)<br/>
                Specifies the spawn time for the value.
            </param>
            <exception cref="T:System.InvalidCastException">
              A value with the same <paramref name="key"/> was already added but its value is incompatible with the new value.
            </exception>
        </member>
        <member name="M:TetraPak.Caching.ITimeLimitedRepositories.DeleteAsync(System.String,System.String)">
            <summary>
              Removes a time limited value.
            </summary>
            <param name="repository">
              Identifies the repository to remove the value from.
            </param>
            <param name="key">
              Value's unique identifier.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              The <paramref name="key"/> was not recognized.
            </exception>
        </member>
        <member name="M:TetraPak.Caching.ITimeLimitedRepositories.ConfigureAsync(System.String,TetraPak.Caching.ITimeLimitedRepositoryOptions)">
            <summary>
              Creates or configures a time limited repository.
            </summary>
            <param name="repository">
              Identifies the repository to be configured.
            </param>
            <param name="options">
              Specifies the repository configuration.
            </param>
        </member>
        <member name="M:TetraPak.Caching.ITimeLimitedRepositories.GetRepositoryOptionsAsync(System.String,System.Boolean)">
            <summary>
              Obtains the configuration for a specified repository.
            </summary>
            <param name="repository">
              Identifies the repository.
            </param>
            <param name="useDefault">
              Specifies whether to return default options when none could be found.
            </param>
            <returns>
              A <see cref="T:TetraPak.Caching.ITimeLimitedRepositoryOptions"/> instance.
            </returns>
        </member>
        <member name="T:TetraPak.Caching.ITimeLimitedRepositoryEntry">
            <summary>
              Implementors of this class can represent individual time limited repository entries. 
            </summary>
        </member>
        <member name="P:TetraPak.Caching.ITimeLimitedRepositoryEntry.Repository">
            <summary>
              The name of the repository.
            </summary>
        </member>
        <member name="P:TetraPak.Caching.ITimeLimitedRepositoryEntry.Key">
            <summary>
              A key identifying the value to be stored within the time limited repository. 
            </summary>
        </member>
        <member name="M:TetraPak.Caching.ITimeLimitedRepositoryEntryExtensions.IsLive(TetraPak.Caching.ITimeLimitedRepositoryEntry)">
            <summary>
              Just a parameter-less variant of the <see cref="M:TetraPak.Caching.ITimeLimitedRepositoryEntry.IsLive(System.TimeSpan@)"/> method,
              for cleaner syntax :-).
            </summary>
        </member>
        <member name="T:TetraPak.Caching.ITimeLimitedRepositoryOptions">
            <summary>
              Implementors of this class can represent options for an individual
              time limited repository.  
            </summary>
        </member>
        <member name="P:TetraPak.Caching.ITimeLimitedRepositoryOptions.LifeSpan">
            <summary>
              Gets the life span for entries of the cache repository.
            </summary>
        </member>
        <member name="P:TetraPak.Caching.ITimeLimitedRepositoryOptions.ExtendedLifeSpan">
            <summary>
              Gets a lifespan to be re-applied to a value as it is being read from the cache, extending its life span.
            </summary>
        </member>
        <member name="P:TetraPak.Caching.ITimeLimitedRepositoryOptions.MaxLifeSpan">
            <summary>
              Gets the maximum total lifespan allowed for any cached value
              within a cache repository. Setting this to anything other than zero will limit the
              total lifespan of cached values to unlimited lifespan due to dynamic lifespan extension
              when reading/updating values (see <see cref="P:TetraPak.Caching.ITimeLimitedRepositoryOptions.ExtendedLifeSpan"/>).
            </summary>
        </member>
        <member name="P:TetraPak.Caching.ITimeLimitedRepositoryOptions.AdjustedLifeSpan">
            <summary>
              Gets a value that reduces the <see cref="P:TetraPak.Caching.ITimeLimitedRepositoryOptions.LifeSpan"/> (and <see cref="P:TetraPak.Caching.ITimeLimitedRepositoryOptions.ExtendedLifeSpan"/> when applicable).
              Use this value to create a "safe zone" for values that have themselves a limited lifetime
              (outside of the repository, such as access tokens), and that might expire within this time span. 
            </summary>
        </member>
        <member name="T:TetraPak.Caching.SimpleCache">
            <summary>
              Implements a very simple memory cache with automatic purging.
            </summary>
        </member>
        <member name="P:TetraPak.Caching.SimpleCache.Logger">
            <summary>
              Gets a logging provider.
            </summary>
        </member>
        <member name="P:TetraPak.Caching.SimpleCache.DefaultLifeSpan">
            <inheritdoc />
        </member>
        <member name="P:TetraPak.Caching.SimpleCache.DefaultExtendedLifeSpan">
            <inheritdoc />
        </member>
        <member name="P:TetraPak.Caching.SimpleCache.DefaultMaxLifeSpan">
            <inheritdoc />
        </member>
        <member name="P:TetraPak.Caching.SimpleCache.DefaultAdjustedLifeSpan">
            <inheritdoc />
        </member>
        <member name="P:TetraPak.Caching.SimpleCache.AutoPurgeInterval">
            <summary>
              Gets or sets an interval between automatic purging processes.
            </summary>
            <remarks>
              By setting this value to anything lower than <see cref="F:System.TimeSpan.MaxValue"/> the
              <see cref="T:TetraPak.Caching.SimpleCache"/> instance will automatically remove all entries regularly,
              to avoid resources leaks.  
            </remarks>
        </member>
        <member name="P:TetraPak.Caching.SimpleCache.IsTypeStrict">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.AddAsync(System.String,System.String,System.Object,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.UpdateAsync(System.String,System.String,System.Object,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.AddOrUpdateAsync(System.String,System.String,System.Object,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.GetLifeSpan(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.GetMaxLifeSpan(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.GetExtendedLifeSpan(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.GetAdjustedLifeSpan(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.GetAsync``1(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.GetAsync``1(System.String,System.String,System.TimeSpan@)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.DeleteAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.ConfigureAsync(System.String,TetraPak.Caching.ITimeLimitedRepositoryOptions)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.GetRepositoryOptionsAsync(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.OnDeleteAsync(System.String,System.String,System.Boolean)">
            <summary>
               Removes a time limited value, optionally without validation.
            </summary>
            <param name="repository">
              Identifies the repository to remove the value from.
            </param>
            <param name="key">
              Value's unique identifier.
            </param>
            <param name="safe">
              When set no validation will take place. Attempting to remove an unrecognized
              value will not throw an exception.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              The <paramref name="key"/> was not recognized and <paramref name="safe"/> was not set.
            </exception>
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.OnPurgeDeadEntriesAsync">
            <summary>
              Gets called automatically (in a background thread) to remove dead entries. 
            </summary>
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.OnPurgeDeadEntries(System.Collections.Generic.IEnumerable{TetraPak.Caching.ITimeLimitedRepositoryEntry})">
            <summary>
              This method gets called from a background thread to allow selecting entries to be removed.
              The default implementation simply returns a collection of entries that are "dead"
              (the <see cref="M:TetraPak.Caching.ITimeLimitedRepositoryEntry.IsLive(System.TimeSpan@)"/> returns <c>false</c>).
            </summary>
            <param name="entries">
              A collection of entries that should be examined. 
            </param>
            <returns>
              A collection of entries that should be removed.
            </returns>
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.WithConfiguration(TetraPak.Caching.SimpleCacheConfig)">
            <summary>
              (fluent API)<br/>
              Applies cache configuration and returns <c>this</c> instance. 
            </summary>
        </member>
        <member name="M:TetraPak.Caching.SimpleCache.#ctor(Microsoft.Extensions.Logging.ILogger{TetraPak.Caching.SimpleCache})">
            <summary>
              Initializes the <see cref="T:TetraPak.Caching.SimpleCache"/>.
            </summary>
            <param name="logger">
              A logger provider to be used for internal logging purposes.
            </param>
        </member>
        <member name="T:TetraPak.Caching.SimpleCacheConfig">
            <summary>
              A configuration section specifying caching strategies. 
            </summary>
        </member>
        <member name="M:TetraPak.Caching.SimpleCacheConfig.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Caching.SimpleCacheConfig.GetRepositoryOptions(System.String)">
            <summary>
              Gets the configuration for a cache repository.
            </summary>
            <param name="repository">
              Identifies the cache repository.
            </param>
            <returns>
              A <see cref="T:TetraPak.Caching.ITimeLimitedRepositoryOptions"/> object.
            </returns>
        </member>
        <member name="M:TetraPak.Caching.SimpleCacheConfig.Configure(System.String,TetraPak.Caching.ITimeLimitedRepositoryOptions)">
            <summary>
              Configures a cache repository from a set of options.
            </summary>
            <param name="repository">
              Identifies the cache repository to be configured.
            </param>
            <param name="options">
              The configuration options. 
            </param>
        </member>
        <member name="M:TetraPak.Caching.SimpleCacheConfig.WithCache(TetraPak.Caching.SimpleCache)">
            <summary>
              (fluent UI)<br/>
              Sets the caching mechanism and returns <c>this</c> instance. 
            </summary>
        </member>
        <member name="M:TetraPak.Caching.SimpleCacheConfig.#ctor(TetraPak.Caching.SimpleCache,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
              Initializes the <see cref="T:TetraPak.Caching.SimpleCacheConfig"/>.
            </summary>
            <param name="cache"></param>
            <param name="configuration"></param>
            <param name="logger"></param>
            <param name="sectionIdentifier"></param>
        </member>
        <member name="T:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions">
            <summary>
              Represents configuration for a named cache repository.
            </summary>
            <seealso cref="T:TetraPak.Caching.SimpleCache"/>
            <seealso cref="T:TetraPak.Caching.SimpleCacheConfig"/>
        </member>
        <member name="P:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.DefaultLifespan">
            <summary>
              Gets or sets a default lifespan for items in <see cref="T:TetraPak.Caching.ITimeLimitedRepositories"/>.
            </summary>
            <seealso cref="P:TetraPak.Caching.SimpleCache.DefaultLifeSpan"/>
        </member>
        <member name="P:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.DefaultExtendedLifespan">
            <summary>
              Gets or sets a default extended lifespan for items in <see cref="T:TetraPak.Caching.ITimeLimitedRepositories"/>.
            </summary>
            <seealso cref="P:TetraPak.Caching.SimpleCache.DefaultExtendedLifeSpan"/>
        </member>
        <member name="P:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.DefaultMaxLifespan">
            <summary>
              Gets or sets a default maximum lifespan for items in <see cref="T:TetraPak.Caching.ITimeLimitedRepositories"/>.
            </summary>
            <seealso cref="P:TetraPak.Caching.SimpleCache.DefaultMaxLifeSpan"/>
        </member>
        <member name="P:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.DefaultAdjustedLifeSpan">
            <summary>
              Gets or sets a default adjusted lifespan for items in <see cref="T:TetraPak.Caching.ITimeLimitedRepositories"/>.
            </summary>
            <seealso cref="P:TetraPak.Caching.SimpleCache.DefaultAdjustedLifeSpan"/>
        </member>
        <member name="P:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.LifeSpan">
            <summary>
              Gets or sets the life span for entries of the configured cache repository.
            </summary>
        </member>
        <member name="P:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.ExtendedLifeSpan">
            <summary>
              Gets or sets a value specifying a lifespan to be re-applied to a value as it is being
              read from the cache.
            </summary>
            <remarks>
              Set this value to an asterisk (*) to always renew by same value as <see cref="P:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.LifeSpan"/>.
            </remarks>
        </member>
        <member name="P:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.MaxLifeSpan">
            <summary>
              Gets or sets a value specifying the maximum total lifespan allowed for any cached value
              within a specific repository. Setting this to anything other than zero will limit the
              total lifespan of cached values to unlimited lifespan due to dynamic lifespan extension
              when reading/updating values (see <see cref="P:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.ExtendedLifeSpan"/>).
            </summary>
        </member>
        <member name="P:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.AdjustedLifeSpan">
            <summary>
              Gets or sets a value that always adjusts the <see cref="P:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.LifeSpan"/>
              (and <see cref="P:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.ExtendedLifeSpan"/> when applicable).
              This value can be used to always increase or decrease the lifespan values.
            </summary>
            <remarks>
              <para>
              One typical application for this is to create a "safe zone" for values that themselves
              have a limited lifetime (outside of the repository),
              and that might expire within this time span, before they can be consumed.</para>
              <para>
              Consider, for example, cached security tokens. Those are typically intended to be used
              when consuming remote services, such as APIs. Depending on network load/capacity you might see
              that after your code retrieves a cached token for your request to the service that validates the
              token needs some extra seconds. If the token is about to expire in, say, three seconds, and your call
              takes that (or more) time to get through to the remote service, the token will not be accepted by that
              service. In those scenarios it is usually a good idea to simply decrease the lifespan of such tokens
              with a few seconds to discard the cached (about to expire) security token
              and force acquiring of a new one. 
              </para>
            </remarks>
        </member>
        <member name="M:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.SetCache(TetraPak.Caching.SimpleCache)">
            <summary>
              Simply sets the internal reference to the parent <see cref="T:TetraPak.Caching.SimpleCache"/> instance.
            </summary>
            <param name="cache">
              The parent <see cref="T:TetraPak.Caching.SimpleCache"/> instance.
            </param>
        </member>
        <member name="P:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.Zero">
            <summary>
              Returns a configuration with all values initialized to <see cref="F:System.TimeSpan.Zero"/>.
            </summary>
        </member>
        <member name="M:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.MergeFrom(TetraPak.Caching.ITimeLimitedRepositoryOptions)">
            <summary>
              Merges options with other options.
            </summary>
            <param name="options"></param>
            <remarks>
              If <paramref name="options"/> is a <see cref="T:TetraPak.Configuration.ConfigurationSection"/> only values
              that are assigned to property backing fields will be merged.
            </remarks>
        </member>
        <member name="M:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.#ctor(TetraPak.Caching.SimpleCache,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
              Initializes the <see cref="T:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions"/>.
            </summary>
        </member>
        <member name="M:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions.#ctor">
            <summary>
              Initializes the <see cref="T:TetraPak.Caching.SimpleTimeLimitedRepositoryOptions"/>.
            </summary>
        </member>
        <member name="T:TetraPak.CollectionMatchingPolicy">
            <summary>
              Value can be used to express how to evaluate the items of a collection.
            </summary>
        </member>
        <member name="F:TetraPak.CollectionMatchingPolicy.Any">
            <summary>
              If any item of the examined collection is considered a successful match
              the operation should be considered a success. 
            </summary>
        </member>
        <member name="F:TetraPak.CollectionMatchingPolicy.All">
            <summary>
              Only if all items of the examined collection are considered a successful match
              the operation should be considered a success.
            </summary>
        </member>
        <member name="T:TetraPak.CommandLineArgs">
            <summary>
              Represents the command line as a <see cref="T:TetraPak.IStringValue"/>.
            </summary>
        </member>
        <member name="M:TetraPak.CommandLineArgs.#ctor(System.String[],System.Boolean)">
            <summary>
              Initializes the value.
            </summary>
            <param name="args">
              The command line arguments to be represented as a value.
            </param>
            <param name="ignoreCase">
              (optional; default=<c>false</c>)<br/>
              Specifies whether command line keys are case sensitive when looking up values (see <see cref="M:TetraPak.CommandLineArgs.Get(System.String[])"/>).
            </param>
            <exception cref="T:System.FormatException">
              The <paramref name="args"/> string representation was incorrectly formed.
            </exception>
        </member>
        <member name="M:TetraPak.CommandLineArgs.Get(System.String[])">
            <summary>
              Looks for and returns a value identified by one or more keys.
            </summary>
            <param name="keys">
              One or more keys to look for.
            </param>
            <returns></returns>
        </member>
        <member name="M:TetraPak.CommandLineArgs.op_Implicit(System.String)~TetraPak.CommandLineArgs">
            <summary>
              Implicitly converts a string literal into a <see cref="T:TetraPak.CommandLineArgs"/>.
            </summary>
            <param name="stringValue">
              A string representation of the <see cref="T:TetraPak.CommandLineArgs"/> value.
            </param>
            <returns>
              A <see cref="T:TetraPak.CommandLineArgs"/> value.
            </returns>
            <exception cref="T:System.FormatException">
              The <paramref name="stringValue"/> string representation was incorrectly formed.
            </exception>
        </member>
        <member name="M:TetraPak.CommandLineArgs.op_Implicit(TetraPak.CommandLineArgs)~System.String">
            <summary>
              Implicitly converts a <see cref="T:TetraPak.CommandLineArgs"/> value into its <see cref="T:System.String"/> representation.
            </summary>
            <param name="value">
              A <see cref="T:TetraPak.CommandLineArgs"/> value to be implicitly converted into its <see cref="T:System.String"/> representation.
            </param>
            <returns>
              The <see cref="T:System.String"/> representation of <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:TetraPak.CommandLineArgs.ToString">
            <inheritdoc />
        </member>
        <member name="T:TetraPak.ConfigurationHelper">
            <summary>
              Provides convenience extension methods for managing configuration. 
            </summary>
        </member>
        <member name="M:TetraPak.ConfigurationHelper.GetWebEnvironment(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
              Gets the name of the running ASP.NET Core environment
              ("<c>ASPNETCORE_ENVIRONMENT</c>" environment variable). 
            </summary>
            <returns>
              The name of the running ASP.NET Core web environment.
            </returns>
        </member>
        <member name="M:TetraPak.ConfigurationHelper.IsWebDevelopment(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
              Gets a <see cref="T:System.Boolean"/> value indicating whether the process is running in development mode.
            </summary>
            <returns>
              <c>true</c> if the web host is running in development mode; otherwise <c>false</c>. 
            </returns>
        </member>
        <member name="M:TetraPak.ConfigurationHelper.GetValue``1(Microsoft.Extensions.Configuration.IConfigurationSection,System.String,``0,TetraPak.Configuration.ValueParser{``0})">
            <summary>
              Gets a value of a specified type from the configuration section.
            </summary>
            <param name="section">
              The configuration section. 
            </param>
            <param name="key">
              Identifies the requested value.
            </param>
            <param name="useDefault">
              A value to be passed back if <paramref name="key"/> <paramref name="section"/>
              did not contain the <paramref name="key"/>.
            </param>
            <param name="parser">
              A parser to transform the value from its textual form to the requested type.
            </param>
            <typeparam name="T">
              The type of value being requested.
            </typeparam>
            <returns>
              The requested value if supported by the <paramref name="section"/>;
              otherwise <paramref name="useDefault"/>.
            </returns>
        </member>
        <member name="M:TetraPak.ConfigurationHelper.GetList``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
              Gets a list of values, of a specified type, from the configuration.
            </summary>
            <param name="configuration">
              The configuration. 
            </param>
            <param name="key">
              Identifies the requested list of values.
            </param>
            <param name="logger">
              (optional)<br/>
              A logger provider for analytical purposes.
            </param>
            <typeparam name="T">
              The type of list items being requested.
            </typeparam>
            <returns>
              The requested list of values if supported by the <paramref name="configuration"/>;
              otherwise an empty list.
            </returns>
        </member>
        <member name="M:TetraPak.ConfigurationHelper.GetArray``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
              Gets an array of values, of a specified type, from the configuration.
            </summary>
            <param name="configuration">
              The configuration. 
            </param>
            <param name="key">
              Identifies the requested list of values.
            </param>
            <param name="logger">
              (optional)<br/>
              A logger provider for analytical purposes.
            </param>
            <typeparam name="T">
              The type of array items being requested.
            </typeparam>
            <returns>
              The requested array of values if supported by the <paramref name="configuration"/>;
              otherwise an empty array.
            </returns>
        </member>
        <member name="M:TetraPak.ConfigurationHelper.GetBool(Microsoft.Extensions.Configuration.IConfigurationSection,System.String,System.Boolean)">
            <summary>
              Gets a <see cref="T:System.Boolean"/> value from the section, or a specified default value.
            </summary>
            <param name="section">
              The configuration section.
            </param>
            <param name="key">
              Identifies the value.
            </param>
            <param name="useDefault">
              A default value to be used if the requested <paramref name="key"/> is not found.
            </param>
            <returns>
              A <see cref="T:System.Boolean"/> value.
            </returns>
        </member>
        <member name="M:TetraPak.ConfigurationHelper.GetNullableBool(Microsoft.Extensions.Configuration.IConfigurationSection,System.String,System.Nullable{System.Boolean})">
            <summary>
              Gets a nullable <see cref="T:System.Boolean"/> value from the section, or (optionally) a specified default value.
            </summary>
            <param name="section">
              The configuration section.
            </param>
            <param name="key">
              Identifies the value.
            </param>
            <param name="useDefault">
              (optional)<br/>
              A default value to be used if the requested <paramref name="key"/> is not found.
            </param>
            <returns>
              A <see cref="T:System.Boolean"/> value, or null if <paramref name="key"/> was not found
              and no <paramref name="useDefault"/> value was passed.
            </returns>
        </member>
        <member name="M:TetraPak.ConfigurationHelper.TryParseConfiguredBool(System.String,System.Boolean@)">
            <summary>
              Parses a <see cref="T:System.String"/> as a configured <see cref="T:System.Boolean"/> value. 
            </summary>
            <param name="stringValue">
              The (configured) <see cref="T:System.Boolean"/> string representation.
            </param>
            <param name="value">
              Passes back the parsed boolean value.
            </param>
            <returns>
              <c>true</c> if <paramref name="stringValue"/> was successfully parsed; otherwise <c>false</c>.
            </returns>
            <remarks>
              A configured <see cref="T:System.Boolean"/> value accepts three forms:
              <list type="bullet">
                <item>
                  <term>true/false</term>
                  <description>
                  - Just use standard C# identifiers <c>true</c> or <c>false</c> (not case sensitive).
                  </description>
                </item>
                <item>
                  <term>yes/no</term>
                  <description>
                  - Use plain English words <c>yes</c> or <c>no</c> for true/false (not case sensitive).
                  </description>
                </item>
                <item>
                  <term>1/0</term>
                  <description>
                  - Use numbers <c>1</c> or <c>0</c> for true/false.
                  </description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="M:TetraPak.ConfigurationHelper.TryParseConfiguredTimeSpan(System.String,System.TimeSpan@)">
            <summary>
              Parses a <see cref="T:System.String"/> as a configured <see cref="T:System.TimeSpan"/> value. 
            </summary>
            <param name="stringValue">
              The (configured) <see cref="T:System.TimeSpan"/> string representation.
            </param>
            <param name="value">
              Passes back the parsed <see cref="T:System.TimeSpan"/> value.
            </param>
            <returns>
              <c>true</c> if <paramref name="stringValue"/> was successfully parsed; otherwise <c>false</c>.
            </returns>
            <remarks>
              A configured <see cref="T:System.TimeSpan"/> value accepts two forms:
              <list type="bullet">
                <item>
                  <term>hh:mm:ss</term>
                  <description>
                  - Use standard C# syntax for <see cref="T:System.TimeSpan"/> string representation.
                  </description>
                </item>
                <item>
                  <term>seconds</term>
                  <description>
                  - Use integer value to express <see cref="T:System.TimeSpan"/> in seconds.
                  </description>
                </item>
              </list>
            </remarks>
        </member>
        <member name="T:TetraPak.Configuration.ConfigPath">
            <summary>
              String value, representing a configuration path.
            </summary>
        </member>
        <member name="F:TetraPak.Configuration.ConfigPath.ConfigDefaultSeparator">
            <summary>
              The default separator used in configuration paths.
            </summary>
        </member>
        <member name="M:TetraPak.Configuration.ConfigPath.op_Implicit(System.String)~TetraPak.Configuration.ConfigPath">
            <summary>
              Implicit type cast <see cref="T:System.String"/> => <see cref="T:TetraPak.Configuration.ConfigPath"/>.
            </summary>
        </member>
        <member name="M:TetraPak.Configuration.ConfigPath.#ctor(System.String)">
            <summary>
              Initializes the <see cref="T:TetraPak.Configuration.ConfigPath"/> from a <see cref="T:System.String"/> value.
            </summary>
            <param name="stringValue">
              The configuration path in its textual form. 
            </param>
        </member>
        <member name="M:TetraPak.Configuration.ConfigPath.#ctor(System.String[])">
            <summary>
              Initializes the <see cref="T:TetraPak.Configuration.ConfigPath"/> from a collection of string items,
              each representing the an element of the configuration path, from root to leaf.
            </summary>
            <param name="items">
              The configuration path elements.
            </param>
        </member>
        <member name="T:TetraPak.Configuration.ConfigurationSection">
            <summary>
              Provides access to the configuration framework through a POCO class. 
            </summary>
        </member>
        <member name="P:TetraPak.Configuration.ConfigurationSection.IsEmpty">
            <summary>
              Gets a value that indicates whether the configuration section contains no information. 
            </summary>
        </member>
        <member name="P:TetraPak.Configuration.ConfigurationSection.SectionIdentifier">
            <summary>
              Can be overridden. Returns the expected configuration section identifier like in this example:<br/>
              <code>
              "MySection": {
                :
              }
              </code>
            </summary>
        </member>
        <member name="P:TetraPak.Configuration.ConfigurationSection.Section">
            <summary>
              Gets the encapsulated <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSection"/>.  
            </summary>
        </member>
        <member name="P:TetraPak.Configuration.ConfigurationSection.ParentConfiguration">
            <summary>
              Gets the parent <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> section
              (or <c>null</c> if this section is also the configuration root).
            </summary>
        </member>
        <member name="P:TetraPak.Configuration.ConfigurationSection.Logger">
            <summary>
              Gets a logger.
            </summary>
        </member>
        <member name="P:TetraPak.Configuration.ConfigurationSection.ConfigPath">
            <summary>
              Gets the section's configuration path.
            </summary>
        </member>
        <member name="M:TetraPak.Configuration.ConfigurationSection.OnGetField(System.String,System.Boolean)">
            <summary>
              Obtains a <see cref="T:System.Reflection.FieldInfo"/> object for a specified field.
            </summary>
            <param name="fieldName">
              Identifies the requested field.
            </param>
            <param name="inherited">
              (optional; default=<c>false</c>)<br/>
              Specifies whether to look for the field in base type(s).
            </param>
            <returns>
              A <see cref="T:System.Reflection.FieldInfo"/> object.
            </returns>
        </member>
        <member name="M:TetraPak.Configuration.ConfigurationSection.GetFromFieldThenSection``1(``0,TetraPak.Configuration.ValueParser{``0},System.Boolean,System.String)">
            <summary>
              Attempts reading a value, first from a backing field and then from the configuration section.
            </summary>
            <param name="useDefault">
              A default value to be returned if no value could be obtained,
              from a backing field or the configuration section. 
            </param>
            <param name="parser">
              (optional)<br/>
              A parser handler, allowing custom parsing of non-standard value types.
            </param>
            <param name="inherited">
              (optional; default=<c>true</c>)<br/>
              Specifies whether to include backing fields from super classes.
            </param>
            <param name="propertyName">
              The name of the requested value (presumably a property name).
            </param>
            <remarks>
              <para>
              The method first reads a value from a backing field (name convention based on property).
              If the field is <c>null</c> (or does not exist) the method instead attempts reading the value
              from the configuration section. If the configuration section also doesn't supported the value
              the method returns the <paramref name="useDefault"/> value.
              </para>
              <para>
              For values that must be fetched from the configuration section the method automatically supports
              parsing standard value types, such as <see cref="T:System.DateTime"/>, <see cref="T:System.TimeSpan"/>
              and all the numeric value types. For other types you need to pass
              a <paramref name="parser"/> delegate or the method will not be able to convert the textual value
              found in the configuration section. 
              </para> 
            </remarks>
        </member>
        <member name="M:TetraPak.Configuration.ConfigurationSection.GetFromSectionThenField``1(``0,TetraPak.Configuration.ValueParser{``0},System.Boolean,System.String)">
            <summary>
              Attempts reading a value, first from the configuration section and then from a backing field.
            </summary>
            <param name="useDefault">
              A default value to be returned if no value could be obtained,
              from a backing field or the configuration section. 
            </param>
            <param name="parser">
              (optional)<br/>
              A parser handler, allowing custom parsing of non-standard value types.
            </param>
            <param name="inherited">
              (optional; default=<c>true</c>)<br/>
              Specifies whether to include backing fields from super classes.
            </param>
            <param name="propertyName">
              The name of the requested value (presumably a property name).
            </param>
            <remarks>
              <para>
              The method first reads a value from the configuration section (name convention based on property).
              If the value is not found in the configuration section the method instead attempts reading the value
              from a backing field. If the backing field does not exist or is unassigned 
              the method returns the <paramref name="useDefault"/> value.
              </para>
              <para>
              For values that can successfully be fetched from the configuration section the method automatically
              supports parsing standard value types, such as <see cref="T:System.DateTime"/>, <see cref="T:System.TimeSpan"/>
              and all the numeric value types. For other types you need to pass
              a <paramref name="parser"/> delegate or the method will not be able to convert the textual value
              found in the configuration section. 
              </para> 
            </remarks>
        </member>
        <member name="M:TetraPak.Configuration.ConfigurationSection.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger,TetraPak.Configuration.ConfigPath)">
            <summary>
              Instantiates a <see cref="T:TetraPak.Configuration.ConfigurationSection"/>.
            </summary>
            <param name="configuration">
              The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> instance that contains the configuration section to be encapsulated.
            </param>
            <param name="logger">
              Initializes the <see cref="P:TetraPak.Configuration.ConfigurationSection.Logger"/> value.
            </param>
            <param name="configPath">
              (optional; default=value from <see cref="P:TetraPak.Configuration.ConfigurationSection.SectionIdentifier"/>)<br/>
              Specifies the configuration section to be encapsulated. 
            </param>
        </member>
        <member name="M:TetraPak.Configuration.ConfigurationSection.#ctor">
            <summary>
              Initializes the configuration section.
            </summary>
        </member>
        <member name="T:TetraPak.ActorToken">
            <summary>
              Security token issued for an actor.
            </summary>
        </member>
        <member name="P:TetraPak.ActorToken.Value">
            <summary>
              The actor's identity.
            </summary>
        </member>
        <member name="P:TetraPak.ActorToken.StringValue">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.ActorToken.ToString">
            <inheritdoc />
        </member>
        <member name="P:TetraPak.ActorToken.IsAssigned">
            <summary>
              Returns a value to indicate whether the actor token is assigned.  
            </summary>
        </member>
        <member name="P:TetraPak.ActorToken.IsJwt">
            <summary>
              Returns a value to indicate the actor token is a JWT.  
            </summary>
        </member>
        <member name="M:TetraPak.ActorToken.OnTryParse(System.String,System.String@)">
            <summary>
              Attempts parsing the value. 
            </summary>
            <param name="value">
              The value to be parsed.
            </param>
            <param name="identity">
              Passes back the identity (token).
            </param>
            <returns>
              <c>true</c> if parsing was successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.ActorToken.TryParse(System.String,TetraPak.ActorToken@)">
            <summary>
              Converts the string representation of a token.
              A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">
              A string containing a token to convert.
            </param>
            <param name="token">
              When this method returns, contains the token equivalent of the value contained in <paramref name="s"/>,
              if the conversion succeeded, or null if the conversion failed.
              The conversion fails if the s parameter is null or Empty, or is not of the correct format.
              This parameter is passed uninitialized; any value originally supplied in result will be overwritten.
            </param>
            <returns>
              <c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.ActorToken.op_Implicit(TetraPak.ActorToken)~System.String">
            <summary>
              Implicitly casts an <see cref="T:TetraPak.ActorToken"/> to its textual representation. 
            </summary>
        </member>
        <member name="M:TetraPak.ActorToken.op_Implicit(System.String)~TetraPak.ActorToken">
            <summary>
              Implicitly casts a token's textual representation into a <see cref="T:TetraPak.ActorToken"/>.
            </summary>
        </member>
        <member name="M:TetraPak.ActorToken.ToJwtSecurityToken">
            <summary>
              Returns the token as a <see cref="M:TetraPak.ActorToken.ToJwtSecurityToken"/> (if applicable).
            </summary>
            <returns>
              A <see cref="M:TetraPak.ActorToken.ToJwtSecurityToken"/> if the token has that form; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:TetraPak.ActorToken.#ctor">
            <summary>
              Initializes an (empty/unassigned) <see cref="T:TetraPak.ActorToken"/>.
            </summary>
        </member>
        <member name="M:TetraPak.ActorToken.#ctor(System.String,System.Boolean)">
            <summary>
              Initializes an <see cref="T:TetraPak.ActorToken"/> from its textual representation.
            </summary>
            <param name="stringValue">
              The token's textual representation.
            </param>
            <param name="parse">
              (optional; default=<c>true</c>)<br/>
              Specifies whether to automatically parse the textual representation.
            </param>
        </member>
        <member name="T:TetraPak.BasicAuthCredentials">
            <summary>
              Represents basic authentication credentials. 
            </summary>
        </member>
        <member name="P:TetraPak.BasicAuthCredentials.Encoded">
            <summary>
              Gets the basic auth credentials encoded form.  
            </summary>
        </member>
        <member name="M:TetraPak.BasicAuthCredentials.Parse(System.String)">
            <summary>
              Parses a <see cref="T:System.String"/> value to produce a <see cref="T:TetraPak.BasicAuthCredentials"/> object.
            </summary>
            <param name="stringValue">
              The <see cref="T:System.String"/> value.
            </param>
            <returns>
              A <see cref="T:TetraPak.BasicAuthCredentials"/> object if parsing was successful;
              otherwise <c>null</c>. 
            </returns>
        </member>
        <member name="M:TetraPak.BasicAuthCredentials.#ctor(System.String)">
            <summary>
              Initializes a <see cref="T:TetraPak.BasicAuthCredentials"/> object.
            </summary>
            <param name="encoded">
              The textual and encoded representation of a <see cref="T:TetraPak.BasicAuthCredentials"/> value.
            </param>
            <exception cref="T:System.FormatException">
              The <paramref name="encoded"/> value could not be successfully parsed.
            </exception>
        </member>
        <member name="M:TetraPak.BasicAuthCredentials.#ctor(System.String,System.String,System.String)">
            <summary>
              Initializes a <see cref="T:TetraPak.BasicAuthCredentials"/> object.
            </summary>
            <param name="identity">
              Initializes <see cref="P:TetraPak.Credentials.Identity"/>.
            </param>
            <param name="secret">
              Initializes <see cref="P:TetraPak.Credentials.Secret"/>.
            </param>
            <param name="newSecret">
              Initializes <see cref="P:TetraPak.Credentials.NewSecret"/>.
            </param>
        </member>
        <member name="T:TetraPak.BearerToken">
            <summary>
              Represents a bearer token (a token with 'Bearer ' prefix).
            </summary>
        </member>
        <member name="F:TetraPak.BearerToken.Qualifier">
            <summary>
              Gets the bearer token qualifier.
            </summary>
        </member>
        <member name="M:TetraPak.BearerToken.ToString">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.BearerToken.Parse(System.String)">
            <summary>
              Converts the string representation of a bearer token to its <see cref="T:TetraPak.BearerToken"/> equivalent.
            </summary>
            <param name="s">
              A string containing a token to convert.
            </param>
            <returns>
              A <see cref="T:TetraPak.BearerToken"/> equivalent to the value contained in s.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="s"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.FormatException">
              <paramref name="s"/> is not in the correct format.
            </exception>
        </member>
        <member name="M:TetraPak.BearerToken.OnTryParse(System.String,System.String@)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.BearerToken.TryParse(System.String,TetraPak.BearerToken@)">
            <summary>
              Converts the string representation of a bearer token.
              A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">
              A string containing a bearer token to convert.
            </param>
            <param name="token">
              When this method returns, contains the token equivalent of the value contained in <paramref name="s"/>,
              if the conversion succeeded, or null if the conversion failed.
              The conversion fails if the s parameter is null or Empty, or is not of the correct format.
              This parameter is passed uninitialized; any value originally supplied in result will be overwritten.
            </param>
            <returns>
              <c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TetraPak.Credentials">
            <summary>
              Represents a generic credentials value, typically used for authentication use purposes.
            </summary>
        </member>
        <member name="P:TetraPak.Credentials.Identity">
            <summary>
              Gets or sets the credentials identity element.
            </summary>
        </member>
        <member name="P:TetraPak.Credentials.Secret">
            <summary>
              Gets or sets the credentials secret/password element.
            </summary>
        </member>
        <member name="P:TetraPak.Credentials.NewSecret">
            <summary>
              Gets or sets a new credentials secret/password element.
            </summary>
        </member>
        <member name="M:TetraPak.Credentials.CloneWithoutSecrets">
            <summary>
              Clones the entity without any secrets, to support scenarios where secrets are not necessary.
            </summary>
            <returns>
              A cloned <see cref="T:TetraPak.Credentials"/>.
            </returns>
        </member>
        <member name="P:TetraPak.Credentials.IsAssigned">
            <summary>
              Gets a value indicating whether the credentials are assigned.
            </summary>
        </member>
        <member name="M:TetraPak.Credentials.#ctor">
            <summary>
              Initializes the <see cref="T:TetraPak.Credentials"/> value.
            </summary>
        </member>
        <member name="M:TetraPak.Credentials.#ctor(System.String,System.String,System.String)">
            <summary>
              Initializes the <see cref="T:TetraPak.Credentials"/> value.
            </summary>
            <param name="identity">
              Initializes the <see cref="P:TetraPak.Credentials.Identity"/> property.
            </param>
            <param name="secret">
              Initializes the <see cref="P:TetraPak.Credentials.Secret"/> property.
            </param>
            <param name="newSecret">
              (optional)<br/>
              Initializes the <see cref="P:TetraPak.Credentials.NewSecret"/> property.
            </param>
        </member>
        <member name="M:TetraPak.Credentials.Dispose">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.DictionaryExtensions.Map``1(System.Collections.Generic.IDictionary{System.String,``0},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
              Generates a new <see cref="T:System.Collections.Generic.IDictionary`2"/> where all keys are
              renamed according to a specified key map.
            </summary>
            <param name="self">
              The source dictionary. 
            </param>
            <param name="keyMap">
              A dictionary containing the key mapping (keys=source keys, values=target keys).
            </param>
            <param name="isRestricted">
              (optional; default=<c>false</c>)<br/>
              Specifies whether to only include attributes whose keys can be found in the <paramref name="keyMap"/>.  
            </param>
            <typeparam name="TValue">
              The dictionary's value <see cref="T:System.Type"/>.
            </typeparam>
            <returns>
              A remapped dictionary.
            </returns>
            <seealso cref="M:TetraPak.DictionaryExtensions.MapSafe``1(System.Collections.Generic.IDictionary{System.String,``0},TetraPak.Serialization.KeyMapInfo,System.Boolean)"/>
        </member>
        <member name="M:TetraPak.DictionaryExtensions.MapSafe``1(System.Collections.Generic.IDictionary{System.String,``0},TetraPak.Serialization.KeyMapInfo,System.Boolean)">
            <summary>
              Generates a new <see cref="T:System.Collections.Generic.IDictionary`2"/> where all keys are
              renamed according to a specified key map.
            </summary>
            <param name="self">
              The source dictionary. 
            </param>
            <param name="keyMap">
              A dictionary containing the key mapping (keys=source keys, values=target keys).
            </param>
            <param name="isRestricted">
              (optional; default=<c>false</c>)<br/>
              Specifies whether to only include attributes whose keys can be found in the <paramref name="keyMap"/>.  
            </param>
            <typeparam name="TValue">
              The dictionary's value <see cref="T:System.Type"/>.
            </typeparam>
            <returns>
              A remapped dictionary.
            </returns>
        </member>
        <member name="M:TetraPak.DictionaryExtensions.ToInverted``1(System.Collections.Generic.IDictionary{``0,``0})">
            <summary>
              Generates an inverted version of a dictionary, making all values become keys and vice versa.
              Please note that the key and value <see cref="T:System.Type"/> must be compatible.
            </summary>
            <param name="self">
              A source dictionary. 
            </param>
            <typeparam name="T">
              The key/value <see cref="T:System.Type"/>.
            </typeparam>
            <returns>
              A new <see cref="T:System.Collections.Generic.IDictionary`2"/> object.
            </returns>
            <seealso cref="M:TetraPak.DictionaryExtensions.ToInverted``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``0}})"/>
        </member>
        <member name="M:TetraPak.DictionaryExtensions.ToInverted``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``0}})">
            <summary>
              Generates a collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> items from an existing collection
              but inverts the position of the keys and values. 
            </summary>
            <param name="self">
              A source collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </param>
            <typeparam name="T">
              The key/value <see cref="T:System.Type"/> (must be the same).
            </typeparam>
            <returns>
              A new collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> items.
            </returns>
            <seealso cref="M:TetraPak.DictionaryExtensions.ToInverted``1(System.Collections.Generic.IDictionary{``0,``0})"/>
        </member>
        <member name="M:TetraPak.DictionaryExtensions.ToInverted``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
              Generates a <see cref="T:System.Collections.Generic.IDictionary`2"/> by inverting the key/values,
              making the values keys and keys values.
            </summary>
            <param name="self">
              The source dictionary.
            </param>
            <typeparam name="TKey">
              The source dictionary key type.
            </typeparam>
            <typeparam name="TValue">
              The source dictionary value type.
            </typeparam>
            <returns>
              A new dictionary.
            </returns>
        </member>
        <member name="M:TetraPak.DictionaryExtensions.ToInverted``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
              Generates a collection of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> items from a source
              collection by inverting the key/values, turning keys into values and values into keys.
            </summary>
            <param name="self">
              The source key value pair collection.
            </param>
            <typeparam name="TKey">
              The source key/value pair collection key type.
            </typeparam>
            <typeparam name="TValue">
              The source key/value pair collection value type.
            </typeparam>
            <returns>
              A new dictionary.
            </returns>
            <remarks>
              Please note that all key-value pairs where the value is <c>null</c> will be ignored.
            </remarks>
        </member>
        <member name="M:TetraPak.DictionaryExtensions.MapTo``3(System.Collections.Generic.IDictionary{``1,``2},System.Func{System.Collections.Generic.KeyValuePair{``1,``2},``0})">
            <summary>
              Maps all key/value elements to a collection of items of a specified type.
            </summary>
        </member>
        <member name="P:TetraPak.DynamicEntities.DynamicEntity.JsonKeyFormat">
            <summary>
              Gets or sets the JSON key format used for all values. 
            </summary>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicEntity.Set``1(``0,System.String)">
            <summary>
              Sets a (property) value.
            </summary>
            <param name="value">
              The value to be assigned.
            </param>
            <param name="caller">
              The name of the caller (presumable a property name).
            </param>
            <typeparam name="TValue">
              The type of value to be set.
            </typeparam>
        </member>
        <member name="T:TetraPak.DynamicEntities.KeyTransformationFormat">
            <summary>
              Used to specify a format for transforming keys (such as in JSON serialization).
            </summary>
        </member>
        <member name="P:TetraPak.DynamicEntities.DynamicPath.StringValue">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.Push(System.String[])">
            <summary>
              (fluent API)<br/>
              Creates and returns a modified path by adding one or more item(s) to the end of the path.
              (This method simply calls <see cref="M:TetraPak.DynamicEntities.DynamicPath.Append(System.String[])"/>).
            </summary>
            <param name="items">
              The items to be added.
            </param>
            <returns>
              The resulting value.
            </returns>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.Append(System.String[])">
            <summary>
              (fluent API)<br/>
              Creates and returns a modified path by adding one or more item(s) to the end of the path.
            </summary>
            <param name="items">
              The items to be added.
            </param>
            <returns>
              The resulting value.
            </returns>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.Insert(System.String[])">
            <summary>
              (fluent API)<br/>
              Creates and returns a modified path by inserting one or more item(s) at the start of the path.
            </summary>
            <param name="items">
              The items to be inserted.
            </param>
            <returns>
              The resulting value.
            </returns>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.Pop(System.Int32,TetraPak.SequentialPosition)">
            <summary>
              Pops item(s) from the end of the path and returns the result.<br/>
              (fluent API)
            </summary>
            <param name="count">
              (optional; default=1)<br/>
              Specifies the number of items to remove from end of path.
            </param>
            <param name="sequentialPosition">
              (optional; default=<see cref="F:TetraPak.SequentialPosition.End"/>)<br/>
              Specifies whether to pop elements from the end or start of the path.
            </param>
            <returns>
              The resulting value.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              The path was empty.
            </exception>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.op_Implicit(System.String)~TetraPak.DynamicEntities.DynamicPath">
            <summary>
              Implicitly converts a string literal into a <see cref="T:TetraPak.DynamicEntities.DynamicPath"/>.
            </summary>
            <param name="stringValue">
              A string representation of the <see cref="T:TetraPak.DynamicEntities.DynamicPath"/> value.
            </param>
            <returns>
              A <see cref="T:TetraPak.DynamicEntities.DynamicPath"/> value.
            </returns>
            <exception cref="T:System.FormatException">
              The <paramref name="stringValue"/> string representation was incorrectly formed.
            </exception>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.op_Implicit(TetraPak.DynamicEntities.DynamicPath)~System.String">
            <summary>
              Implicitly converts a <see cref="T:TetraPak.DynamicEntities.DynamicPath"/> value into its <see cref="T:System.String"/> representation.
            </summary>
            <param name="value">
              A <see cref="T:TetraPak.DynamicEntities.DynamicPath"/> value to be implicitly converted into its <see cref="T:System.String"/> representation.
            </param>
            <returns>
              The <see cref="T:System.String"/> representation of <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.ToString">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.Equals(TetraPak.DynamicEntities.DynamicPath,System.StringComparison)">
            <summary>
              Determines whether the specified value is equal to the current value.
            </summary>
            <param name="other">
              A <see cref="T:TetraPak.DynamicEntities.DynamicPath"/> value to compare to this value.
            </param>
            <param name="stringComparison">
              Specifies the string comparison strategy.
            </param>
            <returns>
              <c>true</c> if <paramref name="other"/> is equal to the current value; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.Equals(System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
            <summary>
              Determines whether the specified string collection matches the current value.
            </summary>
            <param name="items">
              The string items to compare this value to.
            </param>
            <param name="stringComparison">
              Specifies the string comparison strategy.
            </param>
            <returns>
              <c>true</c> if the <paramref name="items"/> matches the internal items of the current value; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.Equals(System.Object)">
            <summary>
              Determines whether the specified object is equal to the current version.
            </summary>
            <param name="obj">
              An object to compare to this value.
            </param>
            <returns>
              <c>true</c> if the specified object is equal to the current version; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.GetHashCode">
            <summary>
              Serves as the default hash function.
            </summary>
            <returns>
              A hash code for the current value.
            </returns>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.op_Equality(TetraPak.DynamicEntities.DynamicPath,TetraPak.DynamicEntities.DynamicPath)">
            <summary>
              Comparison operator overload.
            </summary>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.op_Inequality(TetraPak.DynamicEntities.DynamicPath,TetraPak.DynamicEntities.DynamicPath)">
            <summary>
              Comparison operator overload.
            </summary>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.WithSeparator(System.String)">
            <summary>
              (fluent API)<br/>
              Sets the separator, invalidates the <see cref="P:TetraPak.DynamicEntities.DynamicPath.StringValue"/> and returns <c>this</c>.
            </summary>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.#ctor(System.String,System.String)">
            <summary>
              Initializes the value.
            </summary>
            <param name="stringValue">
              The new value's string representation (will automatically be parsed).
            </param>
            <param name="separator">
              (optional)<br/>
              Specifies a (custom) separator. 
            </param>
            <exception cref="T:System.FormatException">
              The <paramref name="stringValue"/> string representation was incorrectly formed.
            </exception>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPath.#ctor(System.String[])">
            <summary>
              Initializes the value from one or more items.
            </summary>
        </member>
        <member name="F:TetraPak.DynamicEntities.FileSystemSeparatorResolutionPolicy.Unix">
            <summary>
              The UNIX file system separator: '/' is preferred.
            </summary>
        </member>
        <member name="F:TetraPak.DynamicEntities.FileSystemSeparatorResolutionPolicy.Windows">
            <summary>
              The Windows file system separator: '\' is preferred.
            </summary>
        </member>
        <member name="F:TetraPak.DynamicEntities.FileSystemSeparatorResolutionPolicy.Majority">
            <summary>
              The file system separator that is mostly used is also preferred.
            </summary>
        </member>
        <member name="T:TetraPak.DynamicEntities.DynamicPathHelper">
            <summary>
              Provides convenient helper methods for working with <see cref="T:TetraPak.DynamicEntities.DynamicPath"/>.
            </summary>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPathHelper.TrimLeading(TetraPak.DynamicEntities.DynamicPath,TetraPak.DynamicEntities.DynamicPath,System.Nullable{System.StringComparison})">
            <summary>
              Creates and returns a new <see cref="T:TetraPak.DynamicEntities.DynamicPath"/> where the leading elements are removed.
            </summary>
            <param name="self">
              The <see cref="T:TetraPak.DynamicEntities.DynamicPath"/> to be modified.
            </param>
            <param name="path">
              The leading elements to be removed.
            </param>
            <param name="comparison">
              (optional)<br/>
              When set; specifies how elements are compared during validation.
              When unassigned, no string matching will take place: The new <see cref="T:TetraPak.DynamicEntities.DynamicPath"/> will simply
              be trimmed by the number of elements found in <paramref name="path"/>. 
            </param>
            <returns>
              A new <see cref="T:TetraPak.DynamicEntities.DynamicPath"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              <paramref name="path"/> does not match the leading elements of <see cref="T:TetraPak.DynamicEntities.DynamicPath"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <see cref="!:path"/> is longer than the <see cref="T:TetraPak.DynamicEntities.DynamicPath"/> to be trimmed.
            </exception>
        </member>
        <member name="M:TetraPak.DynamicEntities.DynamicPathHelper.Substitute(TetraPak.DynamicEntities.DynamicPath,System.Object,System.Boolean)">
            <summary>
              Examines and substitutes variable elements with specified values. 
            </summary>
            <param name="self">
              The <see cref="T:TetraPak.DynamicEntities.DynamicPath"/>. 
            </param>
            <param name="values">
              Provides values for substituted elements.
            </param>
            <param name="ignoreCase">
              (optional; default=<c>true</c>)<br/>
              Specifies whether to ignore case when matching variable element identifiers.  
            </param>
            <returns>
              A <see cref="T:TetraPak.DynamicEntities.DynamicPath"/> with variable elements substituted.
            </returns>
            <remarks>
              <para>
              Dynamic path substitution requires that the variable elements of the dynamic path
              are qualified between curly brackets ('{' and '}'), like in this example:
              <c>/one/{two}/{three=Hello}/{four?}</c>. In that path the second (<c>{two}</c>), third ({three=Hello})
              and fourth ({four?}) elements are variable elements.</para>
              <para>
              The second element (<c>{two}</c>) is simply substituted with the value found in the
              <paramref name="values"/>'s "Two" property. If <paramref name="values"/> does not declare
              a "Two" property, or its value is <c>null</c> or empty
              a <see cref="T:System.InvalidOperationException"/> is thrown.</para>
              <para>
              The third element specifies a default value ("Hello"), to be used when
              resolving the substitute value fails or results in a <c>null</c>/empty value.
              </para> 
              <para>
              The fourth element ({four?}) is optional (qualified buy the '?' operator). This element is treated
              like the second (<c>{two}</c>) element but will not result in a exception if no value could
              be resolved from <paramref name="values"/>. For example, calling the method like so ...</para>
              <code>
              var values = new { Two = "second" };
              var path = ((DynamicPath)"/one/{two}/{three?}/{four=Hello}").Substitute(new { Two = "second" });
              </code>
              ... will return this dynamic path: "<c>/one/second/Hello</c>".
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              A non-optional variable element name has no corresponding property in <paramref name="values"/>.  
            </exception>
        </member>
        <member name="T:TetraPak.DynamicEntities.FilePath">
            <summary>
              A specialized <see cref="T:TetraPak.DynamicEntities.DynamicPath"/> that makes it easier to work with
              Unix based and Windows file systems.
            </summary>
        </member>
        <member name="P:TetraPak.DynamicEntities.FilePath.SeparatorResolutionPolicy">
            <summary>
              Gets or sets a global policy for how to automatically resolve file system separators.
            </summary>
        </member>
        <member name="M:TetraPak.DynamicEntities.FilePath.OnConstructStack(System.String,System.String)">
            <summary>
              Overrides base method to provide automatic <see cref="!:DynamicPath.Separator"/> resolution.
            </summary>
        </member>
        <member name="P:TetraPak.EnumOutcome`1.TotalCount">
            <summary>
              Gets the total available number of entities.
            </summary>
        </member>
        <member name="P:TetraPak.EnumOutcome`1.Count">
            <summary>
              Gets the number of entities in the outcome.
            </summary>
        </member>
        <member name="T:TetraPak.IdentityConflictException">
            <summary>
              To be thrown when there is a conflict of identities.
            </summary>
        </member>
        <member name="P:TetraPak.IdentityConflictException.Identity">
            <summary>
              Gets the conflicting identity.
            </summary>
        </member>
        <member name="M:TetraPak.IdentityConflictException.#ctor(System.String,System.String,System.Exception)">
            <summary>
              Initializes the <see cref="T:TetraPak.IdentityConflictException"/>.
            </summary>
            <param name="identity">
              Assigns the <see cref="P:TetraPak.IdentityConflictException.Identity"/>
            </param>
            <param name="message">
              The error message that explains the reason for the exception.
            </param>
            <param name="innerException">
              The exception that is the cause of the current exception, or a <c>null</c> reference
              (<c>Nothing</c> in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:TetraPak.files.FileSystemHelper.IsAbsoluteFilePath(System.String,System.String@,System.IO.FileSystemInfo@,System.Boolean)">
            <summary>
              Examines a <see cref="T:System.String"/> and returns a value indicating whether it represents
              an absolute file system path. 
            </summary>
            <param name="self">
              The <see cref="T:System.String"/> to be examined.
            </param>
            <param name="volume">
              Passes back the resolved volume/drive when the <see cref="T:System.String"/> was resolved as
              a file system path; otherwise <c>null</c>. 
            </param>
            <param name="info">
              On success, passes back a <see cref="T:System.IO.FileSystemInfo"/> reflecting an existing file or directory;
              otherwise <c>null</c>.
            </param>
            <param name="allowHypothetical">
              (optional; default=<c>false</c>)<br/>
              When set the examined <see cref="T:System.String"/> will not have to reflect an existing file or folder
              for the evaluation to resolve the <see cref="T:System.String"/> as an absolute file system path. 
            </param>
            <returns>
              <c>true</c> if the <see cref="T:System.String"/> was resolved as a file system path;
              otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.files.FileSystemHelper.GetFileSystemVolume(System.String)">
            <summary>
              Gets the file system volume/drive letter, either from a specified path of from the current folder.
            </summary>
            <param name="path">
              (optional)<br/>
              A file system path for the volume/drive letter to be resolved from. Passing an unassigned
              (<c>null</c> empty or whitespace) resolves the result from the current directory.
            </param>
            <returns>
              The volume/drive letter, either from a specified <paramref name="path"/> of from the current directory. 
            </returns>
        </member>
        <member name="M:TetraPak.files.FileSystemHelper.GetTargetDirectory(System.IO.DirectoryInfo,System.String)">
            <summary>
              Attempts resolving a directory from a path relative to a specified source directory.
            </summary>
            <param name="source">
              The source directory.
            </param>
            <param name="targetPath">
              A (relative) path.
            </param>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> to indicate success/failure and, on success, also carry
              the resolved target <see cref="T:System.IO.DirectoryInfo"/> or, on failure, an <see cref="T:System.Exception"/>.
            </returns>
        </member>
        <member name="M:TetraPak.files.FileSystemHelper.DeleteAllAsync(System.IO.DirectoryInfo,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Removes all files and subfolders in a background thread.
            </summary>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> to indicate success/failure and, on success, also carry
              a <see cref="T:System.IO.DirectoryInfo"/> or, on failure, an <see cref="T:System.Exception"/>.
            </returns>
        </member>
        <member name="M:TetraPak.files.FileSystemHelper.DeleteAll(System.IO.DirectoryInfo)">
            <summary>
              Removes all files and subfolders.
            </summary>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> to indicate success/failure and, on success, also carry
              a <see cref="T:System.IO.DirectoryInfo"/> or, on failure, an <see cref="T:System.Exception"/>.
            </returns>
        </member>
        <member name="M:TetraPak.files.FileSystemHelper.DeleteAllWhereAsync(System.IO.DirectoryInfo,System.Func{System.IO.FileInfo,System.Boolean},System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Removes all files and subfolders in a background thread that complies to a specified criteria.
            </summary>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> to indicate success/failure and, on success, also carry
              a <see cref="T:System.IO.DirectoryInfo"/> or, on failure, an <see cref="T:System.Exception"/>.
            </returns>
        </member>
        <member name="M:TetraPak.files.FileSystemHelper.DeleteAllWhere(System.IO.DirectoryInfo,System.Func{System.IO.FileInfo,System.Boolean},System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Removes all files and subfolders that complies to a specified criteria.
            </summary>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> to indicate success/failure and, on success, also carry
              a <see cref="T:System.IO.DirectoryInfo"/> or, on failure, an <see cref="T:System.Exception"/>.
            </returns>
        </member>
        <member name="T:TetraPak.Indentation">
            <summary>
              Can be used to manage indentation while building textual values.
            </summary>
        </member>
        <member name="P:TetraPak.Indentation.Increment">
            <summary>
              The fixed number of (whitespace) characters in use. 
            </summary>
            <seealso cref="M:TetraPak.Indentation.Push"/>
            <seealso cref="M:TetraPak.Indentation.Pop"/>
        </member>
        <member name="P:TetraPak.Indentation.StringValue">
            <summary>
              The textual indentation in used.
            </summary>
        </member>
        <member name="P:TetraPak.Indentation.Length">
            <summary>
              Gets the current indentation length.
            </summary>
        </member>
        <member name="M:TetraPak.Indentation.Push">
            <summary>
              Produces and returns a new ("lower") indentation level based on <c>this</c> one.
            </summary>
            <returns>
              A new <see cref="T:TetraPak.Indentation"/> value.
            </returns>
        </member>
        <member name="M:TetraPak.Indentation.Pop">
            <summary>
              Returns the previous indentation level (if any).
            </summary>
        </member>
        <member name="M:TetraPak.Indentation.#ctor(System.Int32,System.Char)">
            <summary>
              Initializes the <see cref="T:TetraPak.Indentation"/>.
            </summary>
            <param name="increment">
              Initializes <see cref="P:TetraPak.Indentation.Increment"/>.
            </param>
            <param name="character">
              (optional; default=' ' [space])<br/>
              Specifies the character used to build the textual indentation (<see cref="P:TetraPak.Indentation.StringValue"/>).
            </param>
        </member>
        <member name="T:TetraPak.KeyValueRef">
            <summary>
              Can be used to reference an item of a key/value pair.
            </summary>
        </member>
        <member name="F:TetraPak.KeyValueRef.Key">
            <summary>
              References the key.
            </summary>
        </member>
        <member name="F:TetraPak.KeyValueRef.Value">
            <summary>
              References the value.
            </summary>
        </member>
        <member name="F:TetraPak.KeyValueRef.Both">
            <summary>
              References both <see cref="F:TetraPak.KeyValueRef.Key"/> and <see cref="F:TetraPak.KeyValueRef.Value"/>.
            </summary>
        </member>
        <member name="F:TetraPak.KeyValueRef.None">
            <summary>
              References neither <see cref="F:TetraPak.KeyValueRef.Key"/> nor <see cref="F:TetraPak.KeyValueRef.Value"/>.
            </summary>
        </member>
        <member name="T:TetraPak.Logging.BasicLog">
            <summary>
              Provides a very basic <see cref="T:TetraPak.Logging.ILog"/> implementation.
            </summary>
            <remarks>
              Invoking the different log methods of this implementation simply
              triggers the <see cref="E:TetraPak.Logging.BasicLog.Logged"/> event. This can be utilized to
              dispatch the actual log entries to various logging solutions.
            </remarks>
        </member>
        <member name="E:TetraPak.Logging.BasicLog.Logged">
            <inheritdoc />
        </member>
        <member name="P:TetraPak.Logging.BasicLog.QueryAsync">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Logging.BasicLog.Debug(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Logging.BasicLog.Warning(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Logging.BasicLog.Error(System.Exception,System.String)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Logging.BasicLog.Info(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Logging.BasicLogSection.Section(System.Nullable{TetraPak.Logging.LogRank},System.String,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="T:TetraPak.Logging.ILog">
            <summary>
              Provides a basic logging mechanism to the package.
            </summary>
        </member>
        <member name="E:TetraPak.Logging.ILog.Logged">
            <summary>
              Triggered whenever a log entry gets added.
            </summary>
        </member>
        <member name="P:TetraPak.Logging.ILog.QueryAsync">
            <summary>
              Gets or sets a delegate used for querying the log.
            </summary>
        </member>
        <member name="M:TetraPak.Logging.ILog.Debug(System.String)">
            <summary>
              Adds a message of rank <see cref="F:TetraPak.Logging.LogRank.Debug"/>.
            </summary>
            <param name="message">
              A textual message to be logged.
            </param>
        </member>
        <member name="M:TetraPak.Logging.ILog.Info(System.String)">
            <summary>
              Adds a message of rank <see cref="F:TetraPak.Logging.LogRank.Info"/>.
            </summary>
            <param name="message">
              A textual message to be logged.
            </param>
        </member>
        <member name="M:TetraPak.Logging.ILog.Warning(System.String)">
            <summary>
              Adds a message of rank <see cref="F:TetraPak.Logging.LogRank.Warning"/>.
            </summary>
            <param name="message">
              A textual message to be logged.
            </param>
        </member>
        <member name="M:TetraPak.Logging.ILog.Error(System.Exception,System.String)">
            <summary>
              Adds an <see cref="T:System.Exception"/> and message of rank <see cref="F:TetraPak.Logging.LogRank.Error"/>.
            </summary>
            <param name="exception">
              An <see cref="T:System.Exception"/> to be logged.
            </param>
            <param name="message">
              A textual message to be logged.
            </param>
        </member>
        <member name="M:TetraPak.Logging.ILog.Any(System.String)">
            <summary>
              Adds a log message for any log rank (such as a log section entry/exit.
            </summary>
            <param name="message">
              The message to be logged.
            </param>
        </member>
        <member name="M:TetraPak.Logging.ILog.Write(TetraPak.Logging.LogRank,System.String,System.Exception)">
            <summary>
              Another, more arbitrary, alternative to writing a log entry.
            </summary>
            <param name="rank">
              Specifies the <see cref="T:TetraPak.Logging.LogRank"/>   
            </param>
            <param name="message">
              The message to log.
            </param>
            <param name="exception">
              (optional)<br/>
              An exception to be logged with the log entry. 
            </param>
        </member>
        <member name="T:TetraPak.Logging.ILogEntry">
            <summary>
              Implementors of this interface represents an individual entry in a log.
            </summary>
        </member>
        <member name="P:TetraPak.Logging.ILogEntry.Id">
            <summary>
              Gets a unique if. Can be used to reference a specific entry in support scenarios.
            </summary>
        </member>
        <member name="P:TetraPak.Logging.ILogEntry.Rank">
            <summary>
              Gets the log rank (see <see cref="T:TetraPak.Logging.LogRank"/>).
            </summary>
        </member>
        <member name="P:TetraPak.Logging.ILogEntry.Time">
            <summary>
              Gets the log entry timestamp (should be UTC).
            </summary>
        </member>
        <member name="P:TetraPak.Logging.ILogEntry.Message">
            <summary>
              Get the log message.
            </summary>
        </member>
        <member name="T:TetraPak.Logging.LoggerExtensions">
            <summary>
              Adds convenient logging extension methods to an <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance.
            </summary>
        </member>
        <member name="P:TetraPak.Logging.LoggerExtensions.Prefix">
            <summary>
              Gets (or sets) a default <see cref="T:System.String"/> value to be inserted as a prefix to all
              log entries. This can be used to distinguish entries sourced by your code from other log entries..  
            </summary>
        </member>
        <member name="M:TetraPak.Logging.LoggerExtensions.LogLevel(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.Extensions.Logging.LogLevel,System.Exception,System.String)">
            <summary>
              Writes a log entry in a standardized format, for a specified <see cref="T:Microsoft.Extensions.Logging.LogLevel"/>.  
            </summary>
            <param name="logger">
              The logging provider.
            </param>
            <param name="message">
              A message to be written to <paramref name="logger"/>.
            </param>
            <param name="logLevel">
              The specified log level.
            </param>
            <param name="exception">
              (only applicable for log level <see cref="F:Microsoft.Extensions.Logging.LogLevel.Error"/>)<br/>
              An exception to be logged. 
            </param>
            <param name="messageId">
              (optional)<br/>
              A unique string value for tracking a request/response (mainly for diagnostics purposes).
            </param>
            <seealso cref="M:TetraPak.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger,System.Func{System.String},System.String)"/>
        </member>
        <member name="M:TetraPak.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger,System.String,System.String)">
            <summary>
              Writes a trace log entry in a standardized format.  
            </summary>
            <param name="logger">
              The logging provider.
            </param>
            <param name="message">
              A message to be written to <paramref name="logger"/>.
            </param>
            <param name="messageId">
              (optional)<br/>
              A unique string value for tracking a request/response (mainly for diagnostics purposes).
            </param>
            <seealso cref="M:TetraPak.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger,System.Func{System.String},System.String)"/>
        </member>
        <member name="M:TetraPak.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger,System.Func{System.String},System.String)">
            <summary>
              Writes a trace log entry in a standardized format.  
            </summary>
            <param name="logger">
              The logging provider.
            </param>
            <param name="messageHandler">
              A message handler (only invoked when <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/> is enabled).
            </param>
            <param name="messageId">
              (optional)<br/>
              A unique string value for tracking a request/response (mainly for diagnostics purposes).
            </param>
            <seealso cref="M:TetraPak.Logging.LoggerExtensions.Trace(Microsoft.Extensions.Logging.ILogger,System.String,System.String)"/>
        </member>
        <member name="M:TetraPak.Logging.LoggerExtensions.Debug(Microsoft.Extensions.Logging.ILogger,System.String,System.String)">
            <summary>
              Writes a debug log entry in a standardized format.  
            </summary>
            <param name="logger">
              The logging provider.
            </param>
            <param name="message">
              A message to be written to <paramref name="logger"/>.
            </param>
            <param name="messageId">
              (optional)<br/>
              A unique string value for tracking a request/response (mainly for diagnostics purposes).
            </param>
        </member>
        <member name="M:TetraPak.Logging.LoggerExtensions.Debug(Microsoft.Extensions.Logging.ILogger,System.Func{System.String},System.String)">
            <summary>
              Writes a debug log entry in a standardized format.  
            </summary>
            <param name="logger">
              The logging provider.
            </param>
            <param name="messageHandler">
              A message to be written to <paramref name="logger"/>.
            </param>
            <param name="messageId">
              (optional)<br/>
              A unique string value for tracking a request/response (mainly for diagnostics purposes).
            </param>
        </member>
        <member name="M:TetraPak.Logging.LoggerExtensions.Warning(Microsoft.Extensions.Logging.ILogger,System.String,System.String)">
            <summary>
              Writes a warning log entry in a standardized format.  
            </summary>
            <param name="logger">
              The logging provider.
            </param>
            <param name="message">
              A message to be written to <paramref name="logger"/>.
            </param>
            <param name="messageId">
              (optional)<br/>
              A unique string value for tracking a request/response (mainly for diagnostics purposes).
            </param>
        </member>
        <member name="M:TetraPak.Logging.LoggerExtensions.Warning(Microsoft.Extensions.Logging.ILogger,System.Func{System.String},System.String)">
            <summary>
              Writes a warning log entry in a standardized format.  
            </summary>
            <param name="logger">
              The logging provider.
            </param>
            <param name="messageHandler">
              A message handler (only invoked when <see cref="F:Microsoft.Extensions.Logging.LogLevel.Warning"/> is enabled).
            </param>
            <param name="messageId">
              (optional)<br/>
              A unique string value for tracking a request/response (mainly for diagnostics purposes).
            </param>
        </member>
        <member name="M:TetraPak.Logging.LoggerExtensions.Information(Microsoft.Extensions.Logging.ILogger,System.String,System.String)">
            <summary>
              Writes an information log entry in a standardized format.  
            </summary>
            <param name="logger">
              The logging provider.
            </param>
            <param name="message">
              A message to be written to <paramref name="logger"/>.
            </param>
            <param name="messageId">
              (optional)<br/>
              A unique string value for tracking a request/response (mainly for diagnostics purposes).
            </param>
        </member>
        <member name="M:TetraPak.Logging.LoggerExtensions.Information(Microsoft.Extensions.Logging.ILogger,System.Func{System.String},System.String)">
            <summary>
              Writes an information log entry in a standardized format.  
            </summary>
            <param name="logger">
              The logging provider.
            </param>
            <param name="messageHandler">
              A message handler (only invoked when <see cref="F:Microsoft.Extensions.Logging.LogLevel.Warning"/> is enabled).
            </param>
            <param name="messageId">
              (optional)<br/>
              A unique string value for tracking a request/response (mainly for diagnostics purposes).
            </param>
        </member>
        <member name="M:TetraPak.Logging.LoggerExtensions.Error(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.String)">
            <summary>
              Writes an <see cref="T:System.Exception"/> (error) log entry in a standardized format.  
            </summary>
            <param name="logger">
              The logging provider.
            </param>
            <param name="exception">
              An <see cref="T:System.Exception"/> to be logged.
            </param>
            <param name="message">
              A message to be written to <paramref name="logger"/>.
            </param>
            <param name="messageId">
              (optional)<br/>
              A unique string value for tracking a request/response (mainly for diagnostics purposes).
            </param>
        </member>
        <member name="M:TetraPak.Logging.LoggerExtensions.Error(Microsoft.Extensions.Logging.ILogger,System.Exception,System.Func{System.String},System.String)">
            <summary>
              Writes an information log entry in a standardized format.  
            </summary>
            <param name="logger">
              The logging provider.
            </param>
            <param name="exception">
              An <see cref="T:System.Exception"/> to be logged.
            </param>
            <param name="messageHandler">
              A message handler (only invoked when <see cref="F:Microsoft.Extensions.Logging.LogLevel.Error"/> is enabled).
            </param>
            <param name="messageId">
              (optional)<br/>
              A unique string value for tracking a request/response (mainly for diagnostics purposes).
            </param>
        </member>
        <member name="M:TetraPak.Logging.LoggerExtensions.Format(System.String,System.String)">
            <summary>
              Create a standardized logging format and returns the result.
            </summary>
            <param name="message">
              The message to be logged.
            </param>
            <param name="messageId">
              (optional)<br/>
              A unique string value for tracking a request/response (mainly for diagnostics purposes).
            </param>
            <returns>
              A standardized logging message (<see cref="T:System.String"/> value).
            </returns>
        </member>
        <member name="M:TetraPak.Logging.LoggerExtensions.Format(System.Exception,System.String,System.String)">
            <summary>
              Creates a standardized logging error format and returns the result.
            </summary>
            <param name="exception">
              An <see cref="T:System.Exception"/> to be logged.
            </param>
            <param name="message">
              A message to be logged.
            </param>
            <param name="messageId">
              (optional)<br/>
              A unique string value for tracking a request/response (mainly for diagnostics purposes).
            </param>
            <returns>
              A standardized logging message (<see cref="T:System.String"/> value).
            </returns>
        </member>
        <member name="M:TetraPak.Logging.LoggerExtensions.LogDictionary``2(Microsoft.Extensions.Logging.ILogger,System.Collections.Generic.IDictionary{``0,``1},Microsoft.Extensions.Logging.LogLevel)">
            <summary>
              Writes the contents of a <see cref="T:System.Collections.Generic.IDictionary`2"/> to a <see cref="T:Microsoft.Extensions.Logging.ILogger"/>
              for a specified <see cref="T:Microsoft.Extensions.Logging.LogLevel"/>.
            </summary>
            <param name="logger">
              The logging provider.
            </param>
            <param name="dictionary">
              The dictionary to be written.
            </param>
            <param name="level">
              The <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to be used for teh log entry.
            </param>
            <typeparam name="TKey">
              The dictionary key <see cref="T:System.Type"/>.
            </typeparam>
            <typeparam name="TValue">
              The dictionary value <see cref="T:System.Type"/>.
            </typeparam>
        </member>
        <member name="T:TetraPak.Logging.LoggerHelper">
            <summary>
              Provides convenient helper methods to assist with consistent logging.
            </summary>
        </member>
        <member name="M:TetraPak.Logging.LoggerHelper.GetStateDumpAsync(System.Object,TetraPak.Logging.StateDumpContext)">
            <summary>
              Generates and returns a string to reflect the state of an object.
            </summary>
            <param name="obj">
                The object.
            </param>
            <param name="context">
                Specifies how to render state from the specified object. 
            </param>
            <returns>
              A JSON formatted string, reflecting the object's current state.
            </returns>
            <seealso cref="T:TetraPak.RestrictedValueAttribute"/>
        </member>
        <member name="M:TetraPak.Logging.LoggerHelper.GetLowestLogLevel(Microsoft.Extensions.Logging.ILogger)">
            <summary>
              Gets the lowest <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> defined for the logger provider. 
            </summary>
            <param name="logger">
              The logger provider.
            </param>
            <returns>
              A <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> value.
            </returns>
        </member>
        <member name="M:TetraPak.Logging.LoggerHelper.IsDisclosedForLogger(TetraPak.RestrictedValueAttribute,Microsoft.Extensions.Logging.ILogger)">
            <summary>
              Examines the <see cref="T:TetraPak.RestrictedValueAttribute"/> and returns a value indicating whether
              the decorated value can be disclosed for a specified <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.
            </summary>
            <param name="self">
              The attribute.
            </param>
            <param name="logger">
              The intended logger provider.
            </param>
            <returns>
              <c>true</c> if the decorated value can be disclosed for <paramref name="logger"/>;
              otherwise <c>false</c>. 
            </returns>
        </member>
        <member name="T:TetraPak.Logging.LogRank">
            <summary>
              Used by the (<see cref="T:TetraPak.Logging.ILog"/> based) logging mechanism
              to classify log entries.
            </summary>
        </member>
        <member name="F:TetraPak.Logging.LogRank.Debug">
            <summary>
              The lowest (most detailed) log rank.
            </summary>
        </member>
        <member name="F:TetraPak.Logging.LogRank.Info">
            <summary>
              Logs "normal" operations.
            </summary>
        </member>
        <member name="F:TetraPak.Logging.LogRank.Warning">
            <summary>
              Logs potentially erroneous/invalid operations.
            </summary>
        </member>
        <member name="F:TetraPak.Logging.LogRank.Error">
            <summary>
              Denotes a logged exception.
            </summary>
        </member>
        <member name="F:TetraPak.Logging.LogRank.Any">
            <summary>
              Denotes any log rank.
            </summary>
        </member>
        <member name="T:TetraPak.Logging.StateDump">
            <summary>
              Assists in creating a well formatted state dump of one or more objects.
            </summary>
            <seealso cref="T:TetraPak.RestrictedValueAttribute"/>
        </member>
        <member name="M:TetraPak.Logging.StateDump.AddAsync(System.Object,System.String)">
            <summary>
              Adds an object (a "<paramref name="source"/>) to the state dump.
            </summary>
            <param name="source">
              The object to be added.
            </param>
            <param name="name">
              (optional; default = <see cref="T:System.Type"/> of <paramref name="source"/>)<br/>
              A name for the source. 
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="source"/> was unassigned.
            </exception>
            <seealso cref="T:TetraPak.Logging.StateDumpContext"/>
            <seealso cref="T:TetraPak.RestrictedValueAttribute"/>
        </member>
        <member name="M:TetraPak.Logging.StateDump.WithStackTrace(System.Int32)">
            <summary>
              Invoking this method will have a <see cref="T:TetraPak.Logging.StateDump"/> include a stacktrace.   
            </summary>
            <param name="skipFrames">
              (optional; default = 1)<br/>
              Specifies how many stacktrace frames to be removed from the end of the stacktrace.
              This is to avoid including frames representing calls to the state dump logic itself.
            </param>
            <returns>
              This object (fluent API).
            </returns>
        </member>
        <member name="M:TetraPak.Logging.StateDump.ToString">
            <summary>
              Overrides the base method to also add a prefix and suffix to the state dump.
            </summary>
            <returns>
              A <see cref="T:System.String"/> presenting the state dump, with a prefix/suffix pair for easy recognition. 
            </returns>
            <see cref="M:TetraPak.Logging.StateDump.BuildAsStringAsync"/>
        </member>
        <member name="M:TetraPak.Logging.StateDump.BuildAsStringAsync">
            <summary>
              Returns the <see cref="T:TetraPak.Logging.StateDump"/>'s textual representation.
            </summary>
            <returns>
              A <see cref="T:System.String"/> presenting the state dump, with a prefix/suffix pair for easy recognition. 
            </returns>
        </member>
        <member name="M:TetraPak.Logging.StateDump.#ctor(TetraPak.Logging.StateDumpContext)">
            <summary>
              initializes the <see cref="T:TetraPak.Logging.StateDump"/>.
            </summary>
            <param name="context">
              (optional)<br/>
              A (custom) <see cref="T:TetraPak.Logging.StateDumpContext"/>, to be used instead of the one created automatically.
            </param>
        </member>
        <member name="T:TetraPak.Logging.StateDumpAttribute">
            <summary>
              Add this attribute to properties of classes that are to be included in a "state dump".
            </summary>
            <seealso cref="!:WebLoggerHelper.GetStateDump"/>
            <seealso cref="T:TetraPak.Logging.StateDumpContext"/>
            <seealso cref="T:TetraPak.RestrictedValueAttribute"/>
        </member>
        <member name="T:TetraPak.Logging.StateDumpContext">
            <summary>
              Used to specify data for getting the current state.
            </summary>
        </member>
        <member name="P:TetraPak.Logging.StateDumpContext.IsRetainingTrailingSeparator">
            <summary>
              (default=<c>false</c>)<br/>
              Gets or sets a value specifying whether to retain a trailing member separator (',').
            </summary>
        </member>
        <member name="M:TetraPak.Logging.StateDumpContext.WithIndentation(TetraPak.Indentation)">
            <summary>
              (fluent API)<br/>
              Assigns the <see cref="P:TetraPak.Logging.StateDumpContext.Indentation"/> property and returns <c>this</c>.
            </summary>
        </member>
        <member name="M:TetraPak.Logging.StateDumpContext.#ctor(System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
              Initializes the <see cref="T:TetraPak.Logging.StateDumpContext"/> with default options.
            </summary>
            <param name="caption">
              
            </param>
            <param name="logger">
              (optional)<br/>
              A target logger provider. Adding this to the options is necessary if you need to disclose
              restricted values, based on the declared <see cref="T:Microsoft.Extensions.Logging.LogLevel"/>. 
            </param>
            <seealso cref="T:TetraPak.RestrictedValueAttribute"/>
        </member>
        <member name="T:TetraPak.Logging.TextLogEventArgs">
            <summary>
              Describes a log entry.
            </summary>
        </member>
        <member name="P:TetraPak.Logging.TextLogEventArgs.Rank">
            <summary>
              Gets the log entry rank.
            </summary>
        </member>
        <member name="P:TetraPak.Logging.TextLogEventArgs.Message">
            <summary>
              Gets the log entry message (if any).
            </summary>
        </member>
        <member name="P:TetraPak.Logging.TextLogEventArgs.Exception">
            <summary>
              Gets a log entry error (if any).
            </summary>
        </member>
        <member name="M:TetraPak.Logging.TextLogEventArgs.#ctor(TetraPak.Logging.LogRank,System.String,System.Exception)">
            <summary>
              Initializes the event arguments.
            </summary>
        </member>
        <member name="T:TetraPak.Outcome`1">
            <summary>
              Carries the outcome of an operation as well as any requested data, or an exception.
              The class derives from the <c>abstract</c> <see cref="T:TetraPak.Outcome"/> class.
            </summary>
            <typeparam name="T">
              The <see cref="T:System.Type"/> of data requested.
            </typeparam>
            <remarks>
              <para>
              The .NET try-convention when writing methods, such as
              <see cref="M:System.Enum.TryParse(System.Type,System.String,System.Boolean,System.Object@)"/> relies on returning a <see cref="T:System.Boolean"/>
              value to reflect the outcome of the operation and, when successful, the requested value as an <c>out</c>
              parameter. This is great for synchronous coding but doesn't fit the asynchronous paradigm as <c>out</c>
              parameters are not allowed with <c>async</c> methods in C#.
              </para>
              <para>
              The <see cref="T:TetraPak.Outcome`1"/> is a simple solution to this problem, as it will return both the
              outcome, the requested value (on success) or an <see cref="T:System.Exception"/> if the operation failed. 
              </para>
              <para>
              <b>Implicit type casting</b>
              </para>
              <para>
              An <see cref="T:TetraPak.Outcome`1"/> value can be used to implicitly to test the outcome
              (eg. <c>if (outcome)</c>) ...) or to get the expected value, when successful (eg. <c>Car car = outcome</c>).
              Of course, if the expected value itself is a <see cref="T:System.Boolean"/> then you should avoid implicitly
              type casting the value, as you would always get the "outcome", not the value.
              </para>
              <example>
              <para>
              This example shows an <c>async</c> method that fetches an object from a json file and returns
              the outcome:
              </para>
              <code>
            
              public async Task&lt;Outcome&lt;T&gt;&gt; GetFromFileAsync&lt;T&gt;(string path)
              {
                  try
                  {
                      var json = await File.ReadAllTextAsync(path);
                      var item = JsonSerializer.Deserialize&lt;T&gt;(json);
                      return Outcome&lt;T&gt;.Success(item);
                  }
                  catch (Exception ex)
                  {
                      return Outcome&lt;T&gt;.Fail(ex);
                  }
              }
            
              </code>
              <para>
              This example shows some client code that consumes an <see cref="T:TetraPak.Outcome`1"/> to fetch a <c>Car</c>
              from the file system:
              </para>
              <code>
               public async Task&lt;Car&gt; GetCarAsync(string registrationNumber)
               {
                  var filePath = getFilePathForCarWithRegistrationNumber(registrationNumber);
                  var outcome = await GetFromFileAsync&lt;Car&gt;(filePath);
                  if (!outcome)
                  {
                      _logger.Error(outcome.Exception, $"Failed when reading car: {registrationNumber}");
                      throw outcome.Exception;
                  }
              
                  return outcome;
              }
              </code>
              </example>
            </remarks>
        </member>
        <member name="P:TetraPak.Outcome`1.Value">
            <summary>
              Gets the expected outcome value, when successful. 
            </summary>
            <seealso cref="T:System.Exception"/>
        </member>
        <member name="M:TetraPak.Outcome`1.Success(`0)">
            <summary>
              Creates and returns a successful outcome with a requested value.
            </summary>
            <param name="value">
              The value to be carried by the outcome.
            </param>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> to indicate success and also carry
              a value of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:TetraPak.Outcome`1.Fail">
            <summary>
              Creates and returns a failed outcome.
            </summary>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> to indicate failure and also carry a default
              value of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:TetraPak.Outcome`1.Fail(`0)">
            <summary>
              Creates and returns a failed outcome that also carries a specified value of type
              <typeparamref name="T"/>.
            </summary>
            <param name="value">
              Assigns <see cref="P:TetraPak.Outcome`1.Value"/>.
            </param>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> to indicate failure.
            </returns>
        </member>
        <member name="M:TetraPak.Outcome`1.Fail(System.Exception)">
            <summary>
              Creates and returns a failed outcome that carries an <see cref="T:System.Exception"/>.
            </summary>
            <param name="exception">
              Assigns the <see cref="T:System.Exception"/>.
            </param>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> to indicate failure.
            </returns>
        </member>
        <member name="M:TetraPak.Outcome`1.Fail(System.Exception,`0)">
            <summary>
              Creates and returns a failed outcome that carries an <see cref="T:System.Exception"/> as well as a value.
            </summary>
            <param name="exception">
              Assigns <see cref="T:System.Exception"/>.
            </param>
            <param name="value">
              Assigns <see cref="P:TetraPak.Outcome`1.Value"/>.
            </param>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> to indicate failure.
            </returns>
        </member>
        <member name="M:TetraPak.Outcome`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Outcome`1.op_Implicit(TetraPak.Outcome{`0})~`0">
            <summary>
              Implicitly converts the outcome to the expected value.
            </summary>
            <param name="outcome">
              The outcome.
            </param>
            <returns>
              The expected (successful) outcome value.
            </returns>
        </member>
        <member name="M:TetraPak.Outcome`1.WithValue(`0)">
            <summary>
              Fluid code API to assign the <see cref="P:TetraPak.Outcome`1.Value"/> and return the outcome object. 
            </summary>
            <param name="value">
              Assigns the <see cref="P:TetraPak.Outcome`1.Value"/>.
            </param>
            <returns>
              <c>this</c> outcome object.
            </returns>
        </member>
        <member name="M:TetraPak.Outcome`1.#ctor(System.Boolean,`0,System.Exception)">
            <summary>
              Initializes the <see cref="T:TetraPak.Outcome`1"/>.
            </summary>
            <param name="result">
              Initializes the outcome result (success/failure).
            </param>
            <param name="value">
              Initializes the <see cref="P:TetraPak.Outcome`1.Value"/>.
            </param>
            <param name="exception">
              Initializes the <see cref="T:System.Exception"/>.
            </param>
        </member>
        <member name="T:TetraPak.Outcome">
            <summary>
              Carries the outcome of an operation as well as any requested data, or an exception.
              This class is <c>abstract</c>.
            </summary>
        </member>
        <member name="P:TetraPak.Outcome.Result">
            <summary>
              Gets or value to indicate success/failure.
              This property is intended for use by derived implementations only.
            </summary>
            <seealso cref="M:TetraPak.Outcome.SetResult(System.Boolean)"/>
        </member>
        <member name="P:TetraPak.Outcome.Exception">
            <summary>
              Gets an exception that is relevant to the (failed) outcome.
            </summary>
        </member>
        <member name="M:TetraPak.Outcome.SetResult(System.Boolean)">
            <summary>
              Assigns the <see cref="P:TetraPak.Outcome.Result"/>.
              This method is intended for internal use by derived classes only.
            </summary>
            <param name="value">
              The value to be assigned.
            </param>
        </member>
        <member name="P:TetraPak.Outcome.IsSuccess">
            <summary>
              Gets a value to indicate whether the outcome is successful.
              This is mainly intended for "clear coding" as an alternative to implicitly casting
              the output to a <see cref="T:System.Boolean"/> value when testing outcome.
            </summary>
        </member>
        <member name="M:TetraPak.Outcome.op_Implicit(TetraPak.Outcome)~System.Boolean">
            <summary>
              Implicitly casts the outcome to a <see cref="T:System.Boolean"/> value.
              This is mainly intended for "clear coding" as an alternative to using the <see cref="P:TetraPak.Outcome.IsSuccess"/>
              property for testing outcome.
            </summary>
            <param name="outcome">
              The outcome to be implicitly cast to its <see cref="T:System.Boolean"/> result.
            </param>
            <returns>
              <c>true</c> if the outcome is successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.Outcome.ToString">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.Outcome.#ctor(System.Boolean,System.Exception)">
            <summary>
              Initializes the <see cref="T:TetraPak.Outcome"/> (for use by derived classes only).
            </summary>
            <param name="result">
              Assigns the internal <see cref="P:TetraPak.Outcome.Result"/> (success/failure).
            </param>
            <param name="exception">
              (optional)<br/>
              Assigns the <see cref="P:TetraPak.Outcome.Exception"/>.
            </param>
        </member>
        <member name="P:TetraPak.RandomString.StringValue">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.RandomString.op_Implicit(TetraPak.RandomString)~System.String">
            <summary>
              Implicitly converts a <see cref="T:TetraPak.RandomString"/> value into its <see cref="T:System.String"/> representation.
            </summary>
            <param name="value">
              A <see cref="T:TetraPak.RandomString"/> value to be implicitly converted into its <see cref="T:System.String"/> representation.
            </param>
            <returns>
              The <see cref="T:System.String"/> representation of <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:TetraPak.RandomString.ToString">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.RandomString.Equals(TetraPak.RandomString)">
            <summary>
              Determines whether the specified value is equal to the current value.
            </summary>
            <param name="other">
              A <see cref="T:TetraPak.RandomString"/> value to compare to this value.
            </param>
            <returns>
              <c>true</c> if <paramref name="other"/> is equal to the current value; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.RandomString.Equals(System.Object)">
            <summary>
              Determines whether the specified object is equal to the current version.
            </summary>
            <param name="obj">
              An object to compare to this value.
            </param>
            <returns>
              <c>true</c> if the specified object is equal to the current version; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.RandomString.GetHashCode">
            <summary>
              Serves as the default hash function.
            </summary>
            <returns>
              A hash code for the current value.
            </returns>
        </member>
        <member name="M:TetraPak.RandomString.op_Equality(TetraPak.RandomString,TetraPak.RandomString)">
            <summary>
              Comparison operator overload.
            </summary>
        </member>
        <member name="M:TetraPak.RandomString.op_Inequality(TetraPak.RandomString,TetraPak.RandomString)">
            <summary>
              Comparison operator overload.
            </summary>
        </member>
        <member name="M:TetraPak.RandomString.#ctor(System.UInt32,System.Boolean)">
            <summary>
              Initializes the value.
            </summary>
            <param name="length">
              The length of the random string.
            </param>
            <param name="allowSpecialCharacters">
              When set, special characters can be included in the random string. 
            </param>
        </member>
        <member name="P:TetraPak.ReadChunk.StringValue">
            <inheritdoc />
        </member>
        <member name="P:TetraPak.ReadChunk.IsEmpty">
            <summary>
              Gets a value indicating whether the read chunk is empty (count &lt; 1);
            </summary>
        </member>
        <member name="P:TetraPak.ReadChunk.Skip">
            <summary>
              Number of (leading) entities to be skipped in read operation.
            </summary>
        </member>
        <member name="P:TetraPak.ReadChunk.Count">
            <summary>
              Number of entities to be included in read operation.
            </summary>
        </member>
        <member name="M:TetraPak.ReadChunk.#ctor(System.String)">
            <summary>
              Initializes the value.
            </summary>
            <param name="stringValue">
              The new value's string representation (will automatically be parsed).
            </param>
            <exception cref="T:System.FormatException">
              The <paramref name="stringValue"/> string representation was incorrectly formed.
            </exception>
        </member>
        <member name="M:TetraPak.ReadChunk.Parse(System.String)">
            <summary>
              Converts the string representation of a read chunk to its <see cref="T:TetraPak.ReadChunk"/> equivalent.
            </summary>
            <param name="stringValue">
              A string containing the read chunk to convert.
            </param>
            <returns>
              A <see cref="T:TetraPak.ReadChunk"/> equivalent to the read chunk contained in <paramref name="stringValue"/>.
            </returns>
        </member>
        <member name="M:TetraPak.ReadChunk.TryParse(System.String,TetraPak.ReadChunk@)">
            <summary>
              Converts the string representation of a read chunk to its <see cref="T:TetraPak.ReadChunk"/>.
              A return value indicates whether the conversion succeeded.
            </summary>
            <param name="stringValue">
              A string containing a number to convert.
            </param>
            <param name="chunk">
              When this method returns, contains the <see cref="T:TetraPak.ReadChunk"/> value equivalent of the number
              contained in <paramref name="stringValue"/>, if the conversion succeeded, or <c>null</c>
              if the conversion failed.
              The conversion fails if the <paramref name="stringValue"/> parameter is <c>null</c> or Empty,
              is not of the correct format, or represents a read chunk numbers that are incompatible.
            </param>
            <returns>
              <c>true</c> if s was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.ReadChunk.op_Implicit(System.String)~TetraPak.ReadChunk">
            <summary>
              Implicitly converts a string literal into a <see cref="T:TetraPak.ReadChunk"/>.
            </summary>
            <param name="stringValue">
              A string representation of the <see cref="T:TetraPak.ReadChunk"/> value.
            </param>
            <returns>
              A <see cref="T:TetraPak.ReadChunk"/> value.
            </returns>
            <exception cref="T:System.FormatException">
              The <paramref name="stringValue"/> string representation was incorrectly formed.
            </exception>
        </member>
        <member name="M:TetraPak.ReadChunk.op_Implicit(TetraPak.ReadChunk)~System.String">
            <summary>
              Implicitly converts a <see cref="T:TetraPak.ReadChunk"/> value into its <see cref="T:System.String"/> representation.
            </summary>
            <param name="value">
              A <see cref="T:TetraPak.ReadChunk"/> value to be implicitly converted into its <see cref="T:System.String"/> representation.
            </param>
            <returns>
              The <see cref="T:System.String"/> representation of <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:TetraPak.ReadChunk.ToString">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.ReadChunk.Equals(TetraPak.ReadChunk)">
            <summary>
              Determines whether the specified value is equal to the current value.
            </summary>
            <param name="other">
              A <see cref="T:TetraPak.ReadChunk"/> value to compare to this value.
            </param>
            <returns>
              <c>true</c> if <paramref name="other"/> is equal to the current value; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.ReadChunk.Equals(System.Object)">
            <summary>
              Determines whether the specified object is equal to the current version.
            </summary>
            <param name="obj">
              An object to compare to this value.
            </param>
            <returns>
              <c>true</c> if the specified object is equal to the current version; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.ReadChunk.GetHashCode">
            <summary>
              Serves as the default hash function.
            </summary>
            <returns>
              A hash code for the current value.
            </returns>
        </member>
        <member name="M:TetraPak.ReadChunk.op_Equality(TetraPak.ReadChunk,TetraPak.ReadChunk)">
            <summary>
              Comparison operator overload.
            </summary>
        </member>
        <member name="M:TetraPak.ReadChunk.op_Inequality(TetraPak.ReadChunk,TetraPak.ReadChunk)">
            <summary>
              Comparison operator overload.
            </summary>
        </member>
        <member name="M:TetraPak.ReflectionHelper.IsIndexer(System.Reflection.PropertyInfo)">
            <summary>
              Returns a value indicating whether a <see cref="T:System.Reflection.PropertyInfo"/> represents
              an indexed property.
            </summary>
        </member>
        <member name="T:TetraPak.RestrictedValueAttribute">
            <summary>
              Decorating a property with this attribute indicates the property should not be disclosed
              in log, traces or similar output when the declaring object's state is presented. 
            </summary>
            <seealso cref="T:TetraPak.Logging.StateDump"/>
            <seealso cref="!:WebLoggerHelper.GetStateDump"/>
        </member>
        <member name="P:TetraPak.RestrictedValueAttribute.DisclosureLogLevel">
            <summary>
              (default=<see cref="F:Microsoft.Extensions.Logging.LogLevel.None"/>)<br/>
              Specifies the lowest <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> at which the restricted value can be disclosed.
            </summary>
        </member>
        <member name="T:TetraPak.RuntimeEnvironment">
            <summary>
              This enum value can be used to identity a runtime environment.
            </summary>
        </member>
        <member name="F:TetraPak.RuntimeEnvironment.Unknown">
            <summary>
              Runtime environment is unknown/unresolved.
            </summary>
        </member>
        <member name="F:TetraPak.RuntimeEnvironment.Sandbox">
            <summary>
              Represents a runtime environment used for very early development and/or proof of concept.
              This type of environment must be completely isolated from a production environment.
            </summary>
        </member>
        <member name="F:TetraPak.RuntimeEnvironment.Development">
            <summary>
              Represents a runtime environment that changes very frequently, to be used for development
              purposes only. 
              This type of environment must be completely isolated from a production environment.
            </summary>
        </member>
        <member name="F:TetraPak.RuntimeEnvironment.Migration">
            <summary>
              Represents a runtime environment that emulates a <see cref="F:TetraPak.RuntimeEnvironment.Production"/> environment very closely,
              to test quality and ensure a solution's function before being deployed for production use.
            </summary>
        </member>
        <member name="F:TetraPak.RuntimeEnvironment.Test">
            <summary>
              Equivalent to <see cref="F:TetraPak.RuntimeEnvironment.Migration"/>. 
            </summary>
        </member>
        <member name="F:TetraPak.RuntimeEnvironment.Testing">
            <summary>
              Equivalent to <see cref="F:TetraPak.RuntimeEnvironment.Migration"/>. 
            </summary>
        </member>
        <member name="F:TetraPak.RuntimeEnvironment.Staging">
            <summary>
              Equivalent to <see cref="F:TetraPak.RuntimeEnvironment.Migration"/>. 
            </summary>
        </member>
        <member name="F:TetraPak.RuntimeEnvironment.Production">
            <summary>
              Represents a runtime environment that is fully operational, with access to production level
              services and data. Solutions running in this runtime environment should have been carefully
              tested to ensure stability and functionality.
            </summary>
        </member>
        <member name="T:TetraPak.SecretsManagement.ITetraPakSecretsProvider">
            <summary>
              Classes implementing this interface are responsible for safely obtaining secret data. 
            </summary>
        </member>
        <member name="M:TetraPak.SecretsManagement.ITetraPakSecretsProvider.GetSecretStringAsync(TetraPak.DynamicEntities.DynamicPath)">
            <summary>
              Obtains a specified secret <see cref="T:System.String"/> value.
            </summary>
            <param name="path">
              Specifies the kind of secret to be obtained.
            </param>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> to indicate success/failure and, on success, also carry
              a <see cref="T:System.String"/> or, on failure, an <see cref="T:System.Exception"/>.
            </returns>
        </member>
        <member name="T:TetraPak.SecretsManagement.Secrets">
            <summary>
            
            </summary>
        </member>
        <member name="F:TetraPak.SecretsManagement.Secrets.ClientIdUri">
            <summary>
              Identifies a client id.
            </summary>
        </member>
        <member name="F:TetraPak.SecretsManagement.Secrets.ClientSecretUri">
            <summary>
              Identifies a client secret.
            </summary>
        </member>
        <member name="M:TetraPak.SecretsManagement.Secrets.IsSecretsProviderAdded(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
              Returns a value indicating whether a (custom) <see cref="T:TetraPak.SecretsManagement.ITetraPakSecretsProvider"/> has been added
              to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>. 
            </summary>
            <returns>
              <c>true</c> if a <see cref="T:TetraPak.SecretsManagement.ITetraPakSecretsProvider"/> has been added to the service collection;
              otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.SecretsManagement.Secrets.AddSecretsProvider``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
              Attempts adding a <see cref="T:TetraPak.SecretsManagement.ITetraPakSecretsProvider"/> to a <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="self">
              The service collection.
            </param>
            <typeparam name="T">
              The <see cref="T:TetraPak.SecretsManagement.ITetraPakSecretsProvider"/> service type. 
            </typeparam>
            <returns>
              <c>true</c> if the <see cref="T:TetraPak.SecretsManagement.ITetraPakSecretsProvider"/> service was successfully added;
              otherwise <c>false</c>. 
            </returns>
        </member>
        <member name="T:TetraPak.SequentialPosition">
            <summary>
              Represents the relative position of an arbitrary sequence of data. 
            </summary>
        </member>
        <member name="F:TetraPak.SequentialPosition.Start">
            <summary>
              Represents the start of a sequence.
            </summary>
        </member>
        <member name="F:TetraPak.SequentialPosition.End">
            <summary>
              Represents the end of a sequence.
            </summary>
        </member>
        <member name="T:TetraPak.Serialization.DynamicEntitySafeJsonConverter`1">
            <summary>
              A slower but more flexible JSON converter. This might come in handy when dealing with
              an inconsistent api that can't be relied on to serialize the same data type consistently
              at all times (such as <c>true</c> or sometimes <c>"True"</c> for booleans).
            </summary>
            <typeparam name="T">
              The type of (<see cref="T:TetraPak.DynamicEntities.DynamicEntity"/>) type to be converted.
            </typeparam>
        </member>
        <member name="T:TetraPak.Serialization.IFlexibleEntity">
            <summary>
              Used by the <see cref="T:TetraPak.Serialization.DynamicEntitySafeJsonConverter`1"/> to deal with inconsistent api that
              sometimes return objects/arrays as value types (such as a string).
            </summary>
        </member>
        <member name="T:TetraPak.Serialization.ISerializationKeyMapProvider">
            <summary>
              Dynamic (see <see cref="T:TetraPak.DynamicEntities.DynamicEntity"/>) entities implementing this interface allows for
              automatic renaming of properties during serialization by the <see cref="T:TetraPak.Serialization.DynamicEntityJsonConverter`1"/>. 
            </summary>
            <remarks>
              Implementing this interface is a cheap and efficient means to allow your app service to force a
              naming convention (such as camel case, Pascal case, snake case etc.) without having to declare
              additional classes for output.
            </remarks>
        </member>
        <member name="M:TetraPak.Serialization.ISerializationKeyMapProvider.GetKeyMap">
            <summary>
              Returns a <see cref="T:TetraPak.Serialization.KeyMapInfo"/> object with a key map and other mapping settings.
            </summary>
        </member>
        <member name="T:TetraPak.Serialization.KeyMapInfo">
            <summary>
              Contains a key map and other mapping settings.
            </summary>
        </member>
        <member name="P:TetraPak.Serialization.KeyMapInfo.IsStrict">
            <summary>
              Specifies whether to only include keys supported by the <see cref="P:TetraPak.Serialization.KeyMapInfo.Map"/>.
            </summary>
        </member>
        <member name="P:TetraPak.Serialization.KeyMapInfo.Map">
            <summary>
              A dictionary where each key corresponds to an incoming attribute name and each
              value the attribute name to be used instead.
            </summary>
        </member>
        <member name="M:TetraPak.Serialization.ArrayBufferWriter`1.#ctor">
            <summary>
            Creates an instance of an <see cref="T:TetraPak.Serialization.ArrayBufferWriter`1"/>, in which data can be written to,
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:TetraPak.Serialization.ArrayBufferWriter`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:TetraPak.Serialization.ArrayBufferWriter`1"/>, in which data can be written to,
            with an initial capacity specified.
            </summary>
            <param name="initialCapacity">The minimum capacity with which to initialize the underlying buffer.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="initialCapacity"/> is not positive (i.e. less than or equal to 0).
            </exception>
        </member>
        <member name="P:TetraPak.Serialization.ArrayBufferWriter`1.WrittenMemory">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlyMemory`1"/>.
            </summary>
        </member>
        <member name="P:TetraPak.Serialization.ArrayBufferWriter`1.WrittenSpan">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
        </member>
        <member name="P:TetraPak.Serialization.ArrayBufferWriter`1.WrittenCount">
            <summary>
            Returns the amount of data written to the underlying buffer so far.
            </summary>
        </member>
        <member name="P:TetraPak.Serialization.ArrayBufferWriter`1.Capacity">
            <summary>
            Returns the total amount of space within the underlying buffer.
            </summary>
        </member>
        <member name="P:TetraPak.Serialization.ArrayBufferWriter`1.FreeCapacity">
            <summary>
            Returns the amount of space available that can still be written into without forcing the underlying buffer to grow.
            </summary>
        </member>
        <member name="M:TetraPak.Serialization.ArrayBufferWriter`1.Clear">
            <summary>
            Clears the data written to the underlying buffer.
            </summary>
            <remarks>
            You must clear the <see cref="T:TetraPak.Serialization.ArrayBufferWriter`1"/> before trying to re-use it.
            </remarks>
        </member>
        <member name="M:TetraPak.Serialization.ArrayBufferWriter`1.Advance(System.Int32)">
            <summary>
            Notifies <see cref="T:System.Buffers.IBufferWriter`1"/> that <paramref name="count"/> amount of data was written to the output <see cref="T:System.Span`1"/>/<see cref="T:System.Memory`1"/>
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to advance past the end of the underlying buffer.
            </exception>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:TetraPak.Serialization.ArrayBufferWriter`1.GetMemory(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Memory`1"/> to write to that is at least the requested length (specified by <paramref name="sizeHint"/>).
            If no <paramref name="sizeHint"/> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint"/> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Memory`1"/>.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:TetraPak.Serialization.ArrayBufferWriter`1.GetSpan(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Span`1"/> to write to that is at least the requested length (specified by <paramref name="sizeHint"/>).
            If no <paramref name="sizeHint"/> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint"/> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Span`1"/>.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:TetraPak.Serialization.JsonKeyFormatter.ToCamelCaseIdentifier(System.String)">
            <summary>
              Returns the camelCase version of a <see cref="T:System.String"/>. 
            </summary>
        </member>
        <member name="M:TetraPak.Serialization.JsonKeyFormatter.ToPascalCaseIdentifier(System.String)">
            <summary>
              Returns the PascalCase version of a <see cref="T:System.String"/>. 
            </summary>
        </member>
        <member name="M:TetraPak.Serialization.JsonKeyFormatter.ToSnakeCaseIdentifier(System.String)">
            <summary>
              Returns the snake_case version of a <see cref="T:System.String"/>. 
            </summary>
        </member>
        <member name="M:TetraPak.Serialization.JsonKeyFormatter.ToKebabCaseIdentifier(System.String)">
            <summary>
              Returns the kebab-case version of a <see cref="T:System.String"/>. 
            </summary>
        </member>
        <member name="M:TetraPak.Serialization.StreamHelper.IsEmptyAsync(System.IO.Stream,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Examines a <see cref="T:System.IO.Stream"/> and attempts to resolve whether it is empty (zero length).
            </summary>
            <param name="stream">
              The <see cref="T:System.IO.Stream"/> to be examined.
            </param>
            <param name="force">
              Specifies whether to go ahead and read the stream to obtain the requested value when
              the stream does not support the <see cref="P:System.IO.Stream.Length"/> property
              (<see cref="P:System.IO.Stream.CanSeek"/> = <c>false</c>).
            </param>
            <param name="cancellationToken">
              (optional)<br/>
              Enables cancellation of the operation.
            </param>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> to indicate success/failure and, on success, also carry
              a <see cref="T:System.Boolean"/> or, on failure, an <see cref="T:System.Exception"/>.
            </returns>
            <seealso cref="M:TetraPak.Serialization.StreamHelper.GetLengthAsync(System.IO.Stream,System.Boolean,System.Nullable{System.Threading.CancellationToken})"/>
        </member>
        <member name="M:TetraPak.Serialization.StreamHelper.GetLengthAsync(System.IO.Stream,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Examines a <see cref="T:System.IO.Stream"/> and attempts to resolve its length.
            </summary>
            <param name="stream">
              The <see cref="T:System.IO.Stream"/> to be examined.
            </param>
            <param name="force">
              Specifies whether to go ahead and read the stream to obtain the requested value when
              the stream does not support the <see cref="P:System.IO.Stream.Length"/> property
              (<see cref="P:System.IO.Stream.CanSeek"/> = <c>false</c>).
            </param>
            <param name="cancellationToken">
              (optional)<br/>
              Enables cancellation of the operation.
            </param>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> to indicate success/failure and, on success, also carry
              a <see cref="T:System.Int64"/> (the requested length) or, on failure, an <see cref="T:System.Exception"/>.
            </returns>
            <seealso cref="M:TetraPak.Serialization.StreamHelper.IsEmptyAsync(System.IO.Stream,System.Boolean,System.Nullable{System.Threading.CancellationToken})"/>
        </member>
        <member name="T:TetraPak.StringHelper">
            <summary>
              Convenient extension methods for <see cref="T:System.String"/> operations.
            </summary>
        </member>
        <member name="M:TetraPak.StringHelper.ToLowerInitial(System.String,System.Boolean)">
            <summary>
              Ensures the first letter in the string is lowercase.
            </summary>
            <param name="self">
              The string to be transformed.
            </param>
            <param name="findFirstLetter">
              (optional; default = <c>false</c>)<br/>
              When set; the first occurence if a letter is automatically found (and transformed). 
            </param>
            <returns>
              The transformed string.
            </returns>
        </member>
        <member name="M:TetraPak.StringHelper.ToUpperInitial(System.String,System.Boolean)">
            <summary>
              Ensures the first letter in the string is uppercase.
            </summary>
            <param name="self">
              The string to be transformed.
            </param>
            <param name="findFirstLetter">
              (optional; default = <c>false</c>)<br/>
              When set; the first occurence if a letter is automatically found (and transformed). 
            </param>
            <returns>
              The transformed string.
            </returns>
        </member>
        <member name="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.String,System.StringComparison)">
            <summary>
              Returns the string prefixed as specified. 
            </summary>
            <param name="self">
              The string to be prefixed.
            </param>
            <param name="prefix">
              The required postfix.
            </param>
            <param name="comparison">
              (optional; default=<see cref="F:System.StringComparison.Ordinal"/>)<br/>
              Specifies how to match the postfix.
            </param>
            <returns>
              The string, prefixed as specified.
            </returns>
            <seealso cref="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPrefix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPrefix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPostfix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPostfix(System.String,System.Char,System.Boolean)"/>
        </member>
        <member name="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.Char,System.Boolean)">
            <summary>
              Returns the string prefixed as specified. 
            </summary>
            <param name="self">
              The string to be prefixed.
            </param>
            <param name="prefix">
              The required postfix.
            </param>
            <param name="ignoreCase">
              (optional; default=<c>false</c>)<br/>
              Specifies how to match the postfix.
            </param>
            <returns>
              The string, prefixed as specified.
            </returns>
            <seealso cref="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPrefix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPrefix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPostfix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPostfix(System.String,System.Char,System.Boolean)"/>
        </member>
        <member name="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.String,System.StringComparison)">
            <summary>
              Returns the string prefixed as specified. 
            </summary>
            <param name="self">
              The string to be prefixed.
            </param>
            <param name="postfix">
              The required postfix.
            </param>
            <param name="comparison">
              (optional; default=<see cref="F:System.StringComparison.Ordinal"/>)<br/>
              Specifies how to match the postfix.
            </param>
            <returns>
              The string, prefixed as specified.
            </returns>
            <seealso cref="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPrefix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPrefix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPostfix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPostfix(System.String,System.Char,System.Boolean)"/>
        </member>
        <member name="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.Char,System.Boolean)">
            <summary>
              Returns the string prefixed as specified. 
            </summary>
            <param name="self">
              The string to be prefixed.
            </param>
            <param name="postfix">
              The required postfix.
            </param>
            <param name="ignoreCase">
              (optional; default=<c>false</c>)<br/>
              Specifies how to match the postfix.
            </param>
            <returns>
              The string, prefixed as specified.
            </returns>
            <seealso cref="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPrefix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPrefix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPostfix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPostfix(System.String,System.Char,System.Boolean)"/>
        </member>
        <member name="M:TetraPak.StringHelper.RejectPrefix(System.String,System.String,System.StringComparison)">
            <summary>
              Returns the string without a specified prefix (when present). 
            </summary>
            <param name="self">
              The string to remove prefix from.
            </param>
            <param name="prefix">
              The prefix to be removed.
            </param>
            <param name="comparison">
              (optional; default=<see cref="F:System.StringComparison.Ordinal"/>)<br/>
              Specifies how to match the prefix.
            </param>
            <returns>
              The <see cref="T:System.String"/> without the specified prefix.
            </returns>
            <seealso cref="M:TetraPak.StringHelper.RejectPrefix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPostfix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPostfix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.Char,System.Boolean)"/>
        </member>
        <member name="M:TetraPak.StringHelper.RejectPrefix(System.String,System.Char,System.Boolean)">
            <summary>
              Returns the string without a specified prefix <see cref="T:System.Char"/> (if present). 
            </summary>
            <param name="self">
              The string to remove prefix from.
            </param>
            <param name="prefix">
              The prefix to be removed.
            </param>
            <param name="ignoreCase">
              (optional; default=<c>false</c>)<br/>
              Specifies whether to ignore letter casing when matching the prefix.
            </param>
            <returns>
              The <see cref="T:System.String"/> without the specified prefix.
            </returns>
            <seealso cref="M:TetraPak.StringHelper.RejectPrefix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPostfix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPostfix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.Char,System.Boolean)"/>
        </member>
        <member name="M:TetraPak.StringHelper.RejectPostfix(System.String,System.String,System.StringComparison)">
            <summary>
              Returns the string without a specified postfix (when present). 
            </summary>
            <param name="self">
              The string to remove postfix from.
            </param>
            <param name="postfix">
              The postfix to be removed.
            </param>
            <param name="comparison">
              (optional; default=<see cref="F:System.StringComparison.Ordinal"/>)<br/>
              Specifies how to match the postfix.
            </param>
            <returns>
              The <see cref="T:System.String"/> without the specified postfix.
            </returns>
            <seealso cref="M:TetraPak.StringHelper.RejectPrefix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPrefix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPostfix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.Char,System.Boolean)"/>
        </member>
        <member name="M:TetraPak.StringHelper.RejectPostfix(System.String,System.Char,System.Boolean)">
            <summary>
              Returns the string without a specified postfix <see cref="T:System.Char"/> (if present). 
            </summary>
            <param name="self">
              The string to remove postfix from.
            </param>
            <param name="postfix">
              The postfix to be removed.
            </param>
            <param name="ignoreCase">
              (optional; default=<c>false</c>)<br/>
              Specifies whether to ignore letter casing when matching the postfix.
            </param>
            <returns>
              The <see cref="T:System.String"/> without the specified postfix.
            </returns>
            <seealso cref="M:TetraPak.StringHelper.RejectPrefix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPrefix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.RejectPostfix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePrefix(System.String,System.Char,System.Boolean)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.String,System.StringComparison)"/>
            <seealso cref="M:TetraPak.StringHelper.EnsurePostfix(System.String,System.Char,System.Boolean)"/>
        </member>
        <member name="M:TetraPak.StringHelper.ReplaceLastChar(System.String,System.Char)">
            <summary>
              Constructs and returns a new <see cref="T:System.String"/> by replacing the last <see cref="T:System.Char"/>.
            </summary>
            <param name="self">
              The original <see cref="T:System.String"/>.
            </param>
            <param name="replace">
              The <see cref="T:System.Char"/> ro replace the last one of the <see cref="T:System.String"/>.
            </param>
            <returns>
              The new <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:TetraPak.StringHelper.IsVowel(System.Char)">
            <summary>
              Examines a <see cref="T:System.Char"/> and returns a value indicating it is a vowel.
            </summary>
            <seealso cref="M:TetraPak.StringHelper.IsConsonant(System.Char)"/>
        </member>
        <member name="M:TetraPak.StringHelper.IsConsonant(System.Char)">
            <summary>
              Examines a <see cref="T:System.Char"/> and returns a value indicating it is a consonant.
            </summary>
            <seealso cref="M:TetraPak.StringHelper.IsVowel(System.Char)"/>
        </member>
        <member name="M:TetraPak.StringHelper.ConcatCollection(System.Collections.Generic.IEnumerable{System.Object},System.String,System.Func{System.Object,System.String},System.Int32)">
            <summary>
              Constructs a textual representation of a collection of values.
            </summary>
            <param name="values"></param>
            <param name="separator"></param>
            <param name="callback"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:TetraPak.StringHelper.Concat``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.String,System.Func{System.Object,System.String})">
            <summary>
              Builds a <see cref="T:System.String"/> value from a collection of key/value pairs.
            </summary>
            <param name="self">
              The collection of key value pairs.
            </param>
            <param name="separator">
              (optional; default=", ")<br/>
              A separator to be used for separating the individual items in the result.
            </param>
            <param name="callback">
              (optional)<br/>
              A callback method to customize the result (will be called once per item to produce a <see cref="T:System.String"/>
              representation for that item.
            </param>
            <typeparam name="TKey">
              The key value pair key type.
            </typeparam>
            <typeparam name="TValue">
              The key value pair value type.
            </typeparam>
            <returns>
              A <see cref="T:System.String"/> representation of the collection.
            </returns>
        </member>
        <member name="M:TetraPak.StringHelper.SafeToString(System.Object,System.String,System.String)">
            <summary>
              An alternative to the default <see cref="M:System.Object.ToString"/> to always return a string,
              even for <c>null</c> values.  
            </summary>
            <param name="value">
              The object to be returned in its textual representation.
            </param>
            <param name="nullIdentifier">
              (optional; default=<c>"(null)"</c>)<br/>
              A string literal to be returned if the <paramref name="value"/> is <c>null</c>.
            </param>
            <param name="separator">
              (optional; default=<c>", "</c>)<br/>
              A string literal to be used as separator when the value is a collection of values.
            </param>
            <returns>
              The <paramref name="value"/> in its textual representation.
            </returns>
        </member>
        <member name="M:TetraPak.StringHelper.IndexOf(System.String[],System.String,System.StringComparison)">
            <summary>
              Looks for a string in an array of strings and returns its internal position. 
            </summary>
            <param name="array">
              The array to be examined.
            </param>
            <param name="pattern">
              The textual pattern to look for.
            </param>
            <param name="stringComparison">
              
            </param>
            <returns>
              A positive number, specifying the matching string's index in the array, on a successful match;
              otherwise a negative value (-1). 
            </returns>
            <seealso cref="M:TetraPak.StringHelper.IndexOf(System.String[],System.Text.RegularExpressions.Regex)"/>
        </member>
        <member name="M:TetraPak.StringHelper.IndexOf(System.String[],System.Text.RegularExpressions.Regex)">
            <summary>
              Looks for a string in an array of strings, using <see cref="T:System.Text.RegularExpressions.Regex"/> matching,
              and returns its internal position. 
            </summary>
            <param name="array">
              The array to be examined.
            </param>
            <param name="pattern">
              The <see cref="T:System.Text.RegularExpressions.Regex"/> pattern to match.
            </param>
            <returns>
              A positive number, specifying the matching string's index in the array, on a successful match;
              otherwise a negative value (-1). 
            </returns>
            <seealso cref="M:TetraPak.StringHelper.IndexOf(System.String[],System.String,System.StringComparison)"/>
        </member>
        <member name="M:TetraPak.StringHelper.ToBase64String(System.String)">
            <summary>
              Returns the string in its base-64 encoded form.
            </summary>
        </member>
        <member name="M:TetraPak.StringHelper.IsNumericsOnly(System.String,System.Char[])">
            <summary>
              Examines the string and returns a value indicating whether it only contains numerics.
            </summary>
            <param name="self">
              The string to be examined.
            </param>
            <param name="allowedSymbols">
              (optional)<br/>
              One or more allowed (non-numeric) symbols, such as sign or delimiters.
            </param>
            <returns>
              <c>true</c> if the string only contains numeric characters and, optionally,
              any <paramref name="allowedSymbols"/>; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.StringHelper.IsAssigned(System.String,System.Boolean)">
            <summary>
              Examines the string and returns a value to indicate whether it is considered to be assigned.
            </summary>
            <param name="self">
              The string to be examined.
            </param>
            <param name="isWhitespaceAllowed">
              (optional; default=<c>false</c>)<br/>
              Specifies whether a string with only whitespace is considered to be assigned.
            </param>
            <returns>
              <c>true</c> if the string is considered to be assigned; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.StringHelper.TrimWhitespace(System.String)">
            <summary>
              Constructs and returns the string trimmed of all leading/trailing whitespace.
            </summary>
        </member>
        <member name="M:TetraPak.StringHelper.ToNormalizedArray(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Examines a collection of strings and returns it as an array without any duplicates.
            </summary>
            <param name="strings">
              The collection of strings.
            </param>
            <returns>
              An array of strings, where all duplicates have been removed.
            </returns>
            <remarks>
              The internal matching simply relies on the string items' hash values.
            </remarks>
        </member>
        <member name="T:TetraPak.IStringValue">
            <summary>
              A string compatible value.
            </summary>
        </member>
        <member name="P:TetraPak.IStringValue.StringValue">
            <summary>
              The value's string representation.
            </summary>
        </member>
        <member name="T:TetraPak.MultiStringValue">
            <summary>
              A specialized version of a <see cref="T:TetraPak.IStringValue"/> that supports multiple items.
              This is useful for dealing with of textual representation of lists/collections etc.  
            </summary>
            <seealso cref="T:TetraPak.IStringValue"/>
            <seealso cref="T:TetraPak.StringValueBase"/>
        </member>
        <member name="F:TetraPak.MultiStringValue.DefaultSeparator">
            <summary>
              The default separator used for parsing a <see cref="T:TetraPak.MultiStringValue"/>. 
            </summary>
        </member>
        <member name="P:TetraPak.MultiStringValue.Separator">
            <summary>
              Gets a custom separator (initialized by ctor).
            </summary>
        </member>
        <member name="P:TetraPak.MultiStringValue.Items">
            <summary>
              Gets the string elements of the value as an <see cref="T:System.Array"/> of <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:TetraPak.MultiStringValue.Count">
            <summary>
              Gets the number of <see cref="P:TetraPak.MultiStringValue.Items"/> in the value.
            </summary>
        </member>
        <member name="P:TetraPak.MultiStringValue.Empty">
            <summary>
              Creates and returns an empty <see cref="T:TetraPak.MultiStringValue"/>.
            </summary>
        </member>
        <member name="M:TetraPak.MultiStringValue.OnGetSeparator">
            <summary>
              Called internally to resolve the item separator pattern in use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TetraPak.MultiStringValue.TryParse(System.String,TetraPak.MultiStringValue@,System.StringComparison)">
            <summary>
              Converts a string to its <see cref="T:TetraPak.MultiStringValue"/> equivalent.
              A return value indicates whether the conversion succeeded.
            </summary>
            <param name="stringValue">
              A string containing a <see cref="T:TetraPak.MultiStringValue"/> to convert.
            </param>
            <param name="multiStringValue">
              The successfully parsed <see cref="T:TetraPak.MultiStringValue"/>.
            </param>
            <param name="comparison">
              (optional)<br/>
              A <see cref="T:System.StringComparer"/> used for parsing the <see cref="T:TetraPak.MultiStringValue"/>.
              This is mainly intended for the need in derived classes that needs to override the
              <see cref="M:TetraPak.MultiStringValue.OnValidateItem(System.String,System.StringComparison)"/> method. The comparer have no effect in this class. 
            </param>
            <returns>
              <c>true</c> if <paramref name="stringValue"/> was converted successfully; otherwise, <c>false</c>.
            </returns>
            <seealso cref="M:TetraPak.MultiStringValue.TryParse``1(System.String,``0@,System.StringComparison)"/>
        </member>
        <member name="M:TetraPak.MultiStringValue.TryParse``1(System.String,``0@,System.StringComparison)">
            <summary>
              Converts a string to its <see cref="T:TetraPak.MultiStringValue"/>-compatible equivalent.
              A return value indicates whether the conversion succeeded.
            </summary>
            <param name="stringValue"></param>
            <param name="multiStringValue"></param>
            <param name="comparison"></param>
            <typeparam name="T">
              A <see cref="T:System.Type"/>, deriving from <see cref="T:TetraPak.MultiStringValue"/>,
              for <paramref name="stringValue"/> to be converted to. 
            </typeparam>
            <returns>
              <c>true</c> if <paramref name="stringValue"/> was converted successfully; otherwise, <c>false</c>.
            </returns>
            <seealso cref="M:TetraPak.MultiStringValue.TryParse(System.String,TetraPak.MultiStringValue@,System.StringComparison)"/>
        </member>
        <member name="M:TetraPak.MultiStringValue.OnValidateItem(System.String,System.StringComparison)">
            <summary>
              Called during the parsing process to allow validation of a string item.
              Intended for derived <see cref="T:TetraPak.MultiStringValue"/> classes. This implementation always returns
              a successful result. 
            </summary>
            <param name="item">
              A <see cref="T:System.String"/> item to be validated.
            </param>
            <param name="comparison">
              (optional; default=<see cref="F:System.StringComparison.Ordinal"/>)<br/>
              A string comparison value to be honored by the validation. 
            </param>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> to indicate success/failure and, on success, also carry
              a <see cref="T:System.String"/> or, on failure, an <see cref="T:System.Exception"/>.
            </returns>
        </member>
        <member name="M:TetraPak.MultiStringValue.op_Implicit(TetraPak.MultiStringValue)~System.String">
            <summary>
              Implicitly converts a <see cref="T:TetraPak.MultiStringValue"/> value into its <see cref="T:System.String"/> representation.
            </summary>
            <param name="value">
              A <see cref="T:TetraPak.MultiStringValue"/> value to be implicitly converted into its <see cref="T:System.String"/> representation.
            </param>
            <returns>
              The <see cref="T:System.String"/> representation of <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:TetraPak.MultiStringValue.op_Implicit(System.String)~TetraPak.MultiStringValue">
            <summary>
              Implicit operator for parsing and casting a <see cref="T:System.String"/>
              to a <see cref="T:TetraPak.MultiStringValue"/>.  
            </summary>
            <param name="stringValue">
              
            </param>
            <returns></returns>
        </member>
        <member name="M:TetraPak.MultiStringValue.ToString">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.MultiStringValue.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:TetraPak.MultiStringValue.EqualsSemantically(TetraPak.MultiStringValue,System.StringComparison)">
            <summary>
              Compares with another <see cref="T:TetraPak.MultiStringValue"/> and returns a value to indicate
              whether all items in this value are present in the other, regardless of item's order.
            </summary>
            <param name="other">
              The other <see cref="T:TetraPak.MultiStringValue"/> to compare with.
            </param>
            <param name="comparison">
              (optional; default=<see cref="F:System.StringComparison.Ordinal"/>)<br/>
              Specifies how to compare string values.
            </param>
            <returns>
              <c>true</c> both values contains same number of <see cref="P:TetraPak.MultiStringValue.Items"/>
              and all <see cref="P:TetraPak.MultiStringValue.Items"/> in this value are present in <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:TetraPak.MultiStringValue.Equals(TetraPak.MultiStringValue)">
            <summary>
              Determines whether the specified value is equal to the current value.
            </summary>
            <param name="other">
              A <see cref="T:TetraPak.MultiStringValue"/> value to compare to this value.
            </param>
            <returns>
              <c>true</c> if <paramref name="other"/> is equal to the current value; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.MultiStringValue.Equals(System.Object)">
            <summary>
              Determines whether the specified object is equal to the current version.
            </summary>
            <param name="obj">
              An object to compare to this value.
            </param>
            <returns>
              <c>true</c> if the specified object is equal to the current version; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.MultiStringValue.GetHashCode">
            <summary>
              Serves as the default hash function.
            </summary>
            <returns>
              A hash code for the current value.
            </returns>
        </member>
        <member name="M:TetraPak.MultiStringValue.op_Equality(TetraPak.MultiStringValue,TetraPak.MultiStringValue)">
            <summary>
              Comparison operator overload.
            </summary>
        </member>
        <member name="M:TetraPak.MultiStringValue.op_Inequality(TetraPak.MultiStringValue,TetraPak.MultiStringValue)">
            <summary>
              Comparison operator overload.
            </summary>
        </member>
        <member name="M:TetraPak.MultiStringValue.op_GreaterThanOrEqual(TetraPak.MultiStringValue,TetraPak.MultiStringValue)">
            <summary>
              Overrides the <c>&gt;=</c> operator.
            </summary>
            <param name="left">
              The left (<see cref="T:TetraPak.MultiStringValue"/>) operand.
            </param>
            <param name="right">
              The right (<see cref="T:TetraPak.MultiStringValue"/>) operand.
            </param>
            <returns>
              <c>true</c> if all <see cref="P:TetraPak.MultiStringValue.Items"/> of the <paramref name="right"/> <see cref="T:TetraPak.MultiStringValue"/>
              can be found in the <paramref name="left"/> <see cref="T:TetraPak.MultiStringValue"/>.
            </returns>
        </member>
        <member name="M:TetraPak.MultiStringValue.op_LessThanOrEqual(TetraPak.MultiStringValue,TetraPak.MultiStringValue)">
            <summary>
              Overrides the <c>&lt;=</c> operator.
            </summary>
            <param name="left">
              The left (<see cref="T:TetraPak.MultiStringValue"/>) operand.
            </param>
            <param name="right">
              The right (<see cref="T:TetraPak.MultiStringValue"/>) operand.
            </param>
            <returns>
              <c>true</c> if all <see cref="P:TetraPak.MultiStringValue.Items"/> of the <paramref name="left"/> <see cref="T:TetraPak.MultiStringValue"/>
              can be found in the <paramref name="right"/> <see cref="T:TetraPak.MultiStringValue"/>.
            </returns>
        </member>
        <member name="M:TetraPak.MultiStringValue.WithoutDuplicates(System.String[])">
            <summary>
              Creates a <see cref="T:TetraPak.MultiStringValue"/> from one or more <see cref="T:System.String"/> items,
              automatically removing any duplicates.
            </summary>
            <param name="items">
              The <see cref="T:System.String"/> items. 
            </param>
            <returns>
              A <see cref="T:TetraPak.MultiStringValue"/>.
            </returns>
        </member>
        <member name="M:TetraPak.MultiStringValue.#ctor">
            <summary>
              Initializes an <see cref="P:TetraPak.MultiStringValue.Empty"/> <see cref="T:TetraPak.MultiStringValue"/>.
            </summary>
        </member>
        <member name="M:TetraPak.MultiStringValue.#ctor(System.String,System.String)">
            <summary>
              Initializes the value.
            </summary>
            <param name="stringValue">
              The new value's string representation (will automatically be parsed).
            </param>
            <param name="separator">
              (optional; default=<see cref="F:TetraPak.MultiStringValue.DefaultSeparator"/>)<br/>
              A custom separator.
            </param>
            <exception cref="T:System.FormatException">
              The <paramref name="stringValue"/> string representation was incorrectly formed.
            </exception>
            <seealso cref="F:TetraPak.MultiStringValue.DefaultSeparator"/>
        </member>
        <member name="M:TetraPak.MultiStringValue.#ctor(System.String[],System.String)">
            <summary>
              Initializes an <see cref="T:TetraPak.MultiStringValue"/> from an array of <see cref="T:System.String"/> items.
            </summary>
            <param name="items">
              Initializes <see cref="P:TetraPak.MultiStringValue.Items"/>.
            </param>
            <param name="separator">
              (optional; default=<see cref="F:TetraPak.MultiStringValue.DefaultSeparator"/>)<br/>
              Initializes <see cref="P:TetraPak.MultiStringValue.Separator"/>.
            </param>
        </member>
        <member name="T:TetraPak.MultiStringValueHelper">
            <summary>
              Convenient helper methods for working with <see cref="T:TetraPak.MultiStringValue"/>s.
            </summary>
        </member>
        <member name="M:TetraPak.MultiStringValueHelper.IsEmpty(TetraPak.MultiStringValue)">
            <summary>
              Gets a value indicating whether the <see cref="T:TetraPak.MultiStringValue"/> is empty.
            </summary>
        </member>
        <member name="M:TetraPak.MultiStringValueHelper.Join(TetraPak.MultiStringValue,TetraPak.MultiStringValue,System.Boolean)">
            <summary>
              Constructs a new <see cref="T:TetraPak.MultiStringValue"/> by combining the <see cref="P:TetraPak.MultiStringValue.Items"/>
              of an existing <see cref="T:TetraPak.MultiStringValue"/> with another <see cref="T:TetraPak.MultiStringValue"/>. 
            </summary>
            <param name="self">
              <c>this</c> <see cref="T:TetraPak.MultiStringValue"/>.
            </param>
            <param name="other">
              Another <see cref="T:TetraPak.MultiStringValue"/>.
            </param>
            <param name="trimDuplicates">
              Specifies whether to automatically exclude <see cref="P:TetraPak.MultiStringValue.Items"/> from <paramref name="other"/>
              that matches items in <c>this</c> <see cref="T:TetraPak.MultiStringValue"/>. 
            </param>
            <returns>
              A new <see cref="T:TetraPak.MultiStringValue"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              The <see cref="T:TetraPak.MultiStringValue"/> was <c>null</c>.
            </exception>
            <seealso cref="M:TetraPak.MultiStringValueHelper.Join(TetraPak.MultiStringValue,System.String[],System.Boolean)"/>
        </member>
        <member name="M:TetraPak.MultiStringValueHelper.Join(TetraPak.MultiStringValue,System.String[],System.Boolean)">
            <summary>
              Constructs a new <see cref="T:TetraPak.MultiStringValue"/> by combining the <see cref="P:TetraPak.MultiStringValue.Items"/>
              of an existing <see cref="T:TetraPak.MultiStringValue"/> with a specified array of <see cref="T:System.String"/>s. 
            </summary>
            <param name="self">
              <c>this</c> <see cref="T:TetraPak.MultiStringValue"/>.
            </param>
            <param name="items">
              An array of <see cref="T:System.String"/>s to be combined with the existing <see cref="P:TetraPak.MultiStringValue.Items"/>.
            </param>
            <param name="trimDuplicates">
              Specifies whether to automatically exclude <see cref="P:TetraPak.MultiStringValue.Items"/> from <paramref name="items"/>
              that matches items in <c>this</c> <see cref="T:TetraPak.MultiStringValue"/>. 
            </param>
            <returns>
              A new <see cref="T:TetraPak.MultiStringValue"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              The <see cref="T:TetraPak.MultiStringValue"/> was <c>null</c>.
            </exception>
            <seealso cref="M:TetraPak.MultiStringValueHelper.Join(TetraPak.MultiStringValue,TetraPak.MultiStringValue,System.Boolean)"/>
        </member>
        <member name="M:TetraPak.MultiStringValueHelper.TrimFirst(TetraPak.MultiStringValue,System.Int32,System.Boolean)">
            <summary>
              Creates a new <see cref="T:TetraPak.MultiStringValue"/> from this one, but without one or more leading element(s).
            </summary>
            <param name="self">
              The extended <see cref="T:TetraPak.MultiStringValue"/>.
            </param>
            <param name="count">
              (optional; default=1)<br/>
              Specifies how many items to pop from the <see cref="T:TetraPak.MultiStringValue"/>.
            </param>
            <param name="safe">
              (optional; default=<c>false</c>)<br/>
              When set an invalid <paramref name="count"/> (too high) an <see cref="P:TetraPak.MultiStringValue.Empty"/> value is returned;
              otherwise a <see cref="T:System.ArgumentOutOfRangeException"/> exception is thrown.
            </param>
            <returns>
              A <see cref="T:TetraPak.MultiStringValue"/> with <paramref name="count"/> items removed from the start.
            </returns>
        </member>
        <member name="M:TetraPak.MultiStringValueHelper.TrimLast(TetraPak.MultiStringValue,System.UInt32,System.Boolean)">
            <summary>
              Creates a new <see cref="T:TetraPak.MultiStringValue"/> from this one, but without one or more trailing element(s).
            </summary>
            <param name="self">
              The extended <see cref="T:TetraPak.MultiStringValue"/>.
            </param>
            <param name="count">
              (optional; default=1)<br/>
              Specifies how many items to pop from the <see cref="T:TetraPak.MultiStringValue"/>.
            </param>
            <param name="safe">
              (optional; default=<c>false</c>)<br/>
              When set an invalid <paramref name="count"/> (too high) an <see cref="P:TetraPak.MultiStringValue.Empty"/> value is returned;
              otherwise a <see cref="T:System.ArgumentOutOfRangeException"/> exception is thrown.
            </param>
            <returns>
              A <see cref="T:TetraPak.MultiStringValue"/> with <paramref name="count"/> items removed from the end.
            </returns>
        </member>
        <member name="M:TetraPak.MultiStringValueHelper.CopyFirst(TetraPak.MultiStringValue,System.Int32,System.Boolean)">
            <summary>
              Copies the leading <see cref="P:TetraPak.MultiStringValue.Items"/> of this value to create a new <see cref="T:TetraPak.MultiStringValue"/>.
            </summary>
            <param name="self">
              The extended <see cref="T:TetraPak.MultiStringValue"/>.
            </param>
            <param name="count">
              (optional; default=1)<br/>
              The number of elements to be copied.
            </param>
            <param name="safe">
              (optional; default=<c>false</c>)<bt/>
              When set an invalid <paramref name="count"/> value will return an <see cref="P:TetraPak.MultiStringValue.Empty"/> value;
              otherwise an <see cref="T:System.ArgumentOutOfRangeException"/> will be thrown.
            </param>
            <returns>
              A <see cref="T:TetraPak.MultiStringValue"/> from the first leading items of this one.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              The <paramref name="count"/> value implied more <see cref="P:TetraPak.MultiStringValue.Items"/> than was supported by this value,
              and <paramref name="safe"/> was not set.  
            </exception>
        </member>
        <member name="M:TetraPak.MultiStringValueHelper.CopyLast(TetraPak.MultiStringValue,System.UInt32,System.Boolean)">
            <summary>
              Copies the trailing <see cref="P:TetraPak.MultiStringValue.Items"/> of this value to create a new <see cref="T:TetraPak.MultiStringValue"/>.
            </summary>
            <param name="self">
              The extended <see cref="T:TetraPak.MultiStringValue"/>.
            </param>
            <param name="count">
              (optional; default=1)<br/>
              The number of elements to be copied.
            </param>
            <param name="safe">
              (optional; default=<c>false</c>)<bt/>
              When set an invalid <paramref name="count"/> value will return an <see cref="P:TetraPak.MultiStringValue.Empty"/> value;
              otherwise an <see cref="T:System.ArgumentOutOfRangeException"/> will be thrown.
            </param>
            <returns>
              A <see cref="T:TetraPak.MultiStringValue"/> from the trailing items of this one.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              The <paramref name="count"/> value implied more <see cref="P:TetraPak.MultiStringValue.Items"/> than was supported by this value,
              and <paramref name="safe"/> was not set.  
            </exception>
        </member>
        <member name="M:TetraPak.MultiStringValueHelper.StartsWith(TetraPak.MultiStringValue,TetraPak.MultiStringValue,System.StringComparison)">
            <summary>
              Determines whether the leading <see cref="P:TetraPak.MultiStringValue.Items"/>
              matches another <see cref="T:TetraPak.MultiStringValue"/>. 
            </summary>
            <param name="self">
              The extended <see cref="T:TetraPak.MultiStringValue"/>.
            </param>
            <param name="pattern">
              A <see cref="T:TetraPak.MultiStringValue"/> to compare with.
            </param>
            <param name="stringComparison">
              (optional; default=<see cref="F:System.StringComparison.Ordinal"/>)<br/>
              One of the enumeration values that specifies how the strings will be compared.
            </param>
            <returns>
              <c>true</c> if the leading <see cref="P:TetraPak.MultiStringValue.Items"/> of this value matches all
              items of the <paramref name="pattern"/>.
            </returns>
            <seealso cref="M:TetraPak.MultiStringValueHelper.EndsWith(TetraPak.MultiStringValue,TetraPak.MultiStringValue,System.StringComparison)"/>
        </member>
        <member name="M:TetraPak.MultiStringValueHelper.EndsWith(TetraPak.MultiStringValue,TetraPak.MultiStringValue,System.StringComparison)">
            <summary>
              Determines whether the trailing <see cref="P:TetraPak.MultiStringValue.Items"/> matches
              another <see cref="T:TetraPak.MultiStringValue"/>. 
            </summary>
            <param name="self">
              The extended <see cref="T:TetraPak.MultiStringValue"/>.
            </param>
            <param name="pattern">
              A <see cref="T:TetraPak.MultiStringValue"/> to compare with.
            </param>
            <param name="stringComparison">
              (optional; default=<see cref="F:System.StringComparison.Ordinal"/>)<br/>
              One of the enumeration values that specifies how the strings will be compared.
            </param>
            <returns>
              <c>true</c> if the trailing <see cref="P:TetraPak.MultiStringValue.Items"/> of this value matches all
              items of the <paramref name="pattern"/>.
            </returns>
            <seealso cref="M:TetraPak.MultiStringValueHelper.StartsWith(TetraPak.MultiStringValue,TetraPak.MultiStringValue,System.StringComparison)"/>
        </member>
        <member name="T:TetraPak.StringValueBase">
            <summary>
              A basic implementation of <see cref="T:TetraPak.IStringValue"/>.
            </summary>
            <remarks>
              -- TODO -- Write XML documentation explaining the concept (and benefits) of string values  
            </remarks>
            <seealso cref="T:TetraPak.IStringValue"/>
            <seealso cref="T:TetraPak.MultiStringValue"/>
        </member>
        <member name="F:TetraPak.StringValueBase.ErrorQualifier">
            <summary>
              A string identifier to qualify an erroneous string value. 
            </summary>
        </member>
        <member name="P:TetraPak.StringValueBase.IsError">
            <summary>
            
            </summary>
        </member>
        <member name="P:TetraPak.StringValueBase.StringValue">
            <summary>
              The textual representation of the <see cref="T:TetraPak.IStringValue"/>.
            </summary>
        </member>
        <member name="M:TetraPak.StringValueBase.MakeStringValue``1(System.String)">
            <summary>
              Instantiates a <see cref="T:TetraPak.IStringValue"/> of the specified type.
            </summary>
            <param name="s">
              The textual representation of the requested <see cref="T:TetraPak.IStringValue"/>.
            </param>
            <typeparam name="T">
              The type of <see cref="T:TetraPak.IStringValue"/> to be constructed.   
            </typeparam>
            <returns>
              A <see cref="T:TetraPak.IStringValue"/> object of type <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.Reflection.TargetInvocationException">
              The <typeparamref name="T"/> type does not implement <see cref="T:TetraPak.IStringValue"/>.
            </exception>
        </member>
        <member name="M:TetraPak.StringValueBase.OnParse(System.String)">
            <summary>
              To be overridden.
              Invoked from the ctor (<see cref="M:TetraPak.StringValueBase.#ctor(System.String)"/>) to automatically parse the
              passed <see cref="T:System.String"/> representation of the value.
            </summary>
            <param name="stringValue">
              The <see cref="T:System.String"/> representation to be parsed (by an overriding method).
            </param>
            <returns>
              The (possibly transformed) <paramref name="stringValue"/>.
            </returns>
            <remarks>
              This base implementation will not actually parse the <paramref name="stringValue"/>.
              Instead it will simply look for the <see cref="F:TetraPak.StringValueBase.ErrorQualifier"/> to determine whether
              it is already an erroneous <see cref="T:TetraPak.IStringValue"/>.  
            </remarks>
        </member>
        <member name="M:TetraPak.StringValueBase.ToString">
            <inheritdoc />
        </member>
        <member name="M:TetraPak.StringValueBase.Equals(TetraPak.StringValueBase)">
            <summary>
              Determines whether the specified value is equal to the current value.
            </summary>
            <param name="other">
              A <see cref="T:TetraPak.StringValueBase"/> value to compare to this value.
            </param>
            <returns>
              <c>true</c> if <paramref name="other"/> is equal to the current value; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.StringValueBase.Equals(System.Object)">
            <summary>
              Determines whether the specified object is equal to the current version.
            </summary>
            <param name="obj">
              An object to compare to this value.
            </param>
            <returns>
              <c>true</c> if the specified object is equal to the current version; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.StringValueBase.GetHashCode">
            <summary>
              Serves as the default hash function.
            </summary>
            <returns>
              A hash code for the current value.
            </returns>
        </member>
        <member name="M:TetraPak.StringValueBase.op_Equality(TetraPak.StringValueBase,TetraPak.StringValueBase)">
            <summary>
              Comparison operator overload.
            </summary>
        </member>
        <member name="M:TetraPak.StringValueBase.op_Inequality(TetraPak.StringValueBase,TetraPak.StringValueBase)">
            <summary>
              Comparison operator overload.
            </summary>
        </member>
        <member name="M:TetraPak.StringValueBase.#ctor(System.String)">
            <summary>
              Initializes the <see cref="T:TetraPak.IStringValue"/>.
            </summary>
            <param name="stringValue">
              The textual representation of the <see cref="T:TetraPak.IStringValue"/>.
            </param>
        </member>
        <member name="M:TetraPak.TaskHelper.AwaitCompletionAsync``1(System.Threading.Tasks.TaskCompletionSource{``0})">
            <summary>
              Examines the status of a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> and awaits its
              completion when applicable (the TCS might have already ran to completion) and then returns it.
            </summary>
            <param name="tcs">
               The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> to be awaited.
            </param>
            <typeparam name="T">
              The task completion source's result type.
            </typeparam>
            <returns>
              The specified <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> (<paramref name="tcs"/>). See remarks.
            </returns>
            <remarks>
              The method always returns the specified <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> <paramref name="tcs"/>.
              Caller's should <i>not</i> rely on the instance being assigned after completion as it is a common
              pattern for many asynchronous operations to create the TCS while initiating and then removing is
              upon completion.
            </remarks>
        </member>
        <member name="M:TetraPak.TaskHelper.Await(System.Threading.Tasks.Task,System.Nullable{System.TimeSpan},System.Threading.CancellationTokenSource)">
            <summary>
              Blocks the thread while waiting for a result.
            </summary>
            <param name="task">
              The task to be awaited.
            </param>
            <param name="timeout">
              (optional)<br/>
              Specifies a timeout. If operation times our a default result will be sent back.
            </param>
            <param name="cts">
              (optional)<br/>
              A cancellation token source, allowing operation cancellation (from a different thread).
            </param>
            <returns>
              <c>true</c> if <paramref name="task"/> ran to completion; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.TaskHelper.AwaitResult``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Nullable{System.TimeSpan},System.Threading.CancellationTokenSource)">
            <summary>
              Blocks the thread while waiting for a result.
            </summary>
            <param name="tcs">
              The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> in use for signalling result is available.
            </param>
            <param name="timeout">
              (optional)<br/>
              Specifies a timeout. If operation times our a default result will be sent back.
            </param>
            <param name="cts">
              (optional)<br/>
              A cancellation token source, allowing operation cancellation (from a different thread).
            </param>
            <typeparam name="T">
              The type of result being requested.
            </typeparam>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> value, signalling success/failure while also carrying the requested
              result on success; otherwise an <see cref="T:System.Exception"/>.
            </returns>
        </member>
        <member name="M:TetraPak.TypeHelper.IsCollection(System.Object,System.Type@,System.Collections.IEnumerable@,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
              Examine an object and returns information on whether it is a collection. 
            </summary>
            <param name="self">
              The examined object. 
            </param>
            <param name="itemType">
              Passes back the collection item type on success; otherwise a <c>null</c> value.
            </param>
            <param name="items">
              Passes back the collection items on success; otherwise a <c>null</c> value.
            </param>
            <param name="count">
              On success; passes back the number of items found in the collection, or -1
              (if too expensive to resolve and <paramref name="alwaysResolveCount"/> is not set).
              On failure a value of zero (0) is passed back. 
            </param>
            <param name="alwaysResolveCount">
              (optional; default=<c>false</c>)<br/>
              When set, and the object is considered a collection, the number of items found will always be resolved,
              even when performance might be negatively impacted. When not set the <paramref name="count"/> might
              be passed back as a negative value to indicate the value was not resolved.
            </param>
            <param name="treatStringAsUnary">
              (optional; default=<c>true</c>)<br/>
              When set <see cref="T:System.String"/>s will be treated as unary values, and not as collections.
            </param>
            <returns>
              <c>true</c> if <paramref name="self"/> is a collection; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.TypeHelper.IsCollectionOf``1(System.Object,System.Collections.Generic.IEnumerable{``0}@,System.Boolean)">
            <summary>
              Examines an arbitrary object and returns information indicating whether it is a
              collection of a specified type (<typeparamref name="T"/>). 
            </summary>
            <param name="obj">
              The arbitrary object to examine. 
            </param>
            <param name="items">
              Passes back the collection items if <paramref name="obj"/> is a collection; otherwise <c>null</c>. 
            </param>
            <param name="treatStringAsUnary">
              (optionalM default=<c>true</c>)<br/>
              Specifies whether to treat <see cref="T:System.String"/>s as unary values (not collections).
            </param>
            <typeparam name="T">
              The expected (item) <see cref="T:System.Type"/> (criteria).
            </typeparam>
            <returns>
              <c>true</c> if <paramref name="obj"/> was found to be a collection of type <typeparamref name="T"/>;
              otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:TetraPak.TypeHelper.IsOverloadingImplicitOperator``1(System.Type)">
            <summary>
              Gets a value specifying whether the <seealso cref="T:System.Type"/> declares an
              overloaded implicit type method.
            </summary>
            <typeparam name="T">
              The overloaded <seealso cref="T:System.Type"/>.
            </typeparam>
            <param name="self">
              The <see cref="T:System.Type"/> declaring the requested implicit overloaded type method.
            </param>
            <returns>
              <c>true</c> if the type declares an implicit overloaded type method; otherwise <c>false</c>.
            </returns>
            <seealso cref="M:TetraPak.TypeHelper.GetOverloadingImplicitOperator(System.Type,System.Type)"/>
        </member>
        <member name="M:TetraPak.TypeHelper.GetOverloadingImplicitOperator(System.Type,System.Type)">
            <summary>
              Attempts getting an implicit overload operator type method.
            </summary>
            <param name="self">
              The <see cref="T:System.Type"/> declaring the requested implicit overloaded type method.
            </param>
            <param name="type">
              The overloaded <see cref="T:System.Type"/>.
            </param>
            <returns>
              The <see cref="T:System.Reflection.MethodInfo"/> if the requested implicit overloaded type method exists; otherwise <c>null</c>.
            </returns>
            <seealso cref="M:TetraPak.TypeHelper.IsOverloadingImplicitOperator``1(System.Type)"/>
            <seealso cref="M:TetraPak.TypeHelper.IsOverloadingImplicitOperator``1(System.Type)"/>
        </member>
        <member name="M:TetraPak.TypeHelper.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
              Examines a collection and returns a value to indicate it contains
              at least one item that is also contained in another collection. 
            </summary>
            <param name="self">
              The collection to be examined.
            </param>
            <param name="other">
              A collection of items to look for.
            </param>
            <param name="comparer">
              (optional)<br/>
              Specifies how to compare the items.
            </param>
            <returns>
              <c>true</c> if one (or more) item in <paramref name="other"/> is contained by
              the collection.
            </returns>
        </member>
        <member name="M:TetraPak.TypeHelper.ContainsAny(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.StringComparison})">
            <summary>
              Examines a collection of <see cref="T:System.String"/> and returns a value to indicate it contains
              at least one item that is also contained in another collection of <see cref="T:System.String"/>s. 
            </summary>
            <param name="self">
              The collection of <see cref="T:System.String"/>s to be examined.
            </param>
            <param name="other">
              A collection of strings to look for.
            </param>
            <param name="comparison">
              (optional)<br/>
              Specifies how to compare <see cref="T:System.String"/>s.
            </param>
            <returns>
              <c>true</c> if one (or more) item in <paramref name="other"/> is contained by
              the collection of <see cref="T:System.String"/>s.
            </returns>
        </member>
        <member name="T:TetraPak.Xml.XmlPatcher">
            <summary>
              Supports convenient XML patching capabilities.
            </summary>
        </member>
        <member name="M:TetraPak.Xml.XmlPatcher.LoadAsync(System.String,System.Threading.CancellationToken)">
            <summary>
              Loads an XML document into a new <see cref="T:TetraPak.Xml.XmlPatcher"/> instance, ready to be patched.
            </summary>
            <param name="path">
              The path to the XML document to be patched.
            </param>
            <param name="cancellationToken">
              A <see cref="T:System.Threading.CancellationToken"/>, allowing the asynchronous load operation to be cancelled.
            </param>
            <returns>
              A <see cref="T:TetraPak.Outcome`1"/> instance to indicate success/failure.
            </returns>
            <seealso cref="M:TetraPak.Xml.XmlPatcher.SaveAsync(System.Threading.CancellationToken,System.String)"/>
        </member>
        <member name="M:TetraPak.Xml.XmlPatcher.SaveAsync(System.Threading.CancellationToken,System.String)">
            <summary>
              Saves the patched XML document.
            </summary>
            <param name="cancellationToken">
              A <see cref="T:System.Threading.CancellationToken"/>, allowing the asynchronous save operation to be cancelled.
            </param>
            <param name="path">
              (optional; default=the path used to load the document)<br/>
              The path to the XML document to be saved.
            </param>
            <returns>
              A <see cref="T:TetraPak.Outcome`1"/> instance to indicate success/failure.
            </returns>
        </member>
        <member name="M:TetraPak.Xml.XmlPatcher.CopyValue(System.String,System.Collections.Generic.IEnumerable{System.String},TetraPak.Xml.ValueEventDelegate,System.Boolean)">
            <summary>
              Copies a specified value to one or more target nodes.
            </summary>
            <param name="source">
              Identifies (XPath) the value to be copied.
            </param>
            <param name="targets">
              Identifies (XPath) the nodes to copy the value to.
            </param>
            <param name="copyDelegate">
              (optional)<br/>
              A delegate for custom processing. The delegate should set the <see cref="N:TetraPak.Xml"/>
            </param>
            <param name="failOnTargetNotFound">
              (optional; default=<c>true</c>)<br/>
              Specifies whether to abort the patching process if one target cannot be found.
            </param>
            <returns>
              An <see cref="T:TetraPak.Outcome`1"/> value to indicate success/failure.
            </returns>
        </member>
        <member name="P:TetraPak.Xml.XElementValueEventArgs.Value">
            <summary>
              The value to be processed.
            </summary>
        </member>
        <member name="P:TetraPak.Xml.XElementValueEventArgs.Action">
            <summary>
              Gets or sets an action to be performed by the operation after the delegate is has run.
              The delegate should set this value to <see cref="F:TetraPak.Xml.XElementAction.None"/> to indicate
              no further processing by the invoker. 
            </summary>
        </member>
        <member name="P:TetraPak.Xml.XElementValueEventArgs.SourceElement">
            <summary>
              The source <see cref="T:System.Xml.Linq.XElement"/> for the process.
            </summary>
        </member>
        <member name="P:TetraPak.Xml.XElementValueEventArgs.TargetElement">
            <summary>
              The intended target <see cref="T:System.Xml.Linq.XElement"/> for the process.
            </summary>
        </member>
    </members>
</doc>
